#!/bin/bash
#
# Contains a mapping of a git repo paths to a comma-separated list of the according local
# branch name and remote branch names to pull from and push to.
# Also contains helper functions to use the mapping.
#
# The mapping contains repos that may be worked with together.

# This is the mapping of repo paths to branch names. Adjust to your needs.
declare -A repo_paths2default_branch_names=(
    ["${HOME}/c1/ansible-playbooks"]='master,master,master'
    ["${HOME}/c1/c1-authproxy"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-authservice"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-buildout"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-cds"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-celery-monitor"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-cip"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-cockpitserver"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-config-files-authproxy"]='master,master,master'
    ["${HOME}/c1/c1-config-files-cip-mw"]='master,master,master'
    ["${HOME}/c1/c1-cre-api"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-custom-dumont"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-custom-hanser"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-custom-krone"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-custom-mhs"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-custom-nzz"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-custom-rhp"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-custom-rp"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-custom-springer"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-custom-sueddeutsche"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-custom-tamedia"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-custom-tsp"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-documentation"]='master,master,master'
    ["${HOME}/c1/c1-docutils"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-engine"]='develop,develop,refs/for/develop'
    ["${HOME}/c1/c1-entitlement"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-exceptions"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-fixtures"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-frontend"]='develop,develop,refs/for/develop'
    ["${HOME}/c1/c1-lua"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-metrics"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-metrics-aggregator"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-mock"]='master,master,master'
    ["${HOME}/c1/c1-ocb-integrator"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-openid"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-pueblo"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-robotframework"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-scheduler"]='master,master,refs/for/master'
    ["${HOME}/c1/c1-templates-bundle"]='master,master,refs/for/master'
    ["${HOME}/c1/docker-bulidscripts"]='master,master,master'
    ["${HOME}/c1/dockerfiles"]='master,master,master'
    ["${HOME}/c1/jenkins-packaging-buildscripts"]='master,master,master'
    ["${HOME}/c1/presentations"]='master,master,master'
)

# sanity check
for repo in "${!repo_paths2default_branch_names[@]}"; do
        branch_names_string="${repo_paths2default_branch_names[${repo}]}";
        IFS=',' read -r -a branch_names <<< "${branch_names_string}"

        if [ ${#branch_names[@]} != 3 ] ; then
            output="Error in ${BASH_SOURCE[0]} sourced by ${0}: Repo ${repo}'s branch names array"
            output="${output} is malformed: ${branch_names[@]}. It should contain 3 exactly"
            output="${output} branches in the form (local,remote pull, remote push), but does not."
            >&2 printf "${output}\n"
        fi
done

# utility functions
function local_branch {
    local branches_string="${repo_paths2default_branch_names[${1}]}";
    IFS=',' read -r -a branches <<< "${branches_string}"
    echo "${branches[0]}"
}

function remote_pull_branch {
    local branches_string="${repo_paths2default_branch_names[${1}]}";
    IFS=',' read -r -a branches <<< "${branches_string}"
    echo "${branches[1]}"
}

function remote_push_branch {
    local branches_string="${repo_paths2default_branch_names[${1}]}";
    IFS=',' read -r -a branches <<< "${branches_string}"
    echo "${branches[2]}"
}
