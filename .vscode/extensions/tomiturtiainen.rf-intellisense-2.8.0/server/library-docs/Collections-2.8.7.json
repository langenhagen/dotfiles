{"name":"Collections","version":"2.8.7","keywords":[{"name":"Append To List","args":"list_, *values","doc":"Adds values to the end of list.\n\nExample:\n\n```\nAppend To List  ${L1}  xxx    \nAppend To List  ${L2}  x  y  z\n```\n\n\\=>\n\n*   ${L1} = \\['a', 'xxx'\\]\n*   ${L2} = \\['a', 'b', 'x', 'y', 'z'\\]"},{"name":"Combine Lists","args":"*lists","doc":"Combines the given lists together and returns the result.\n\nThe given lists are not altered by this keyword.\n\nExample:\n\n```\n${x} =  Combine List  ${L1}  ${L2}  \n${y} =  Combine List  ${L1}  ${L2}  ${L1}\n```\n\n\\=>\n\n*   ${x} = \\['a', 'a', 'b'\\]\n*   ${y} = \\['a', 'a', 'b', 'a'\\]\n*   ${L1} and ${L2} are not changed."},{"name":"Convert To List","args":"item","doc":"Converts the given item to a list.\n\nMainly useful for converting tuples and other iterable to lists. Use Create List from the BuiltIn library for constructing new lists."},{"name":"Copy Dictionary","args":"dictionary","doc":"Returns a copy of the given dictionary.\n\nThe given dictionary is never altered by this keyword."},{"name":"Copy List","args":"list_","doc":"Returns a copy of the given list.\n\nThe given list is never altered by this keyword."},{"name":"Count Values In List","args":"list_, value, start=0, end=None","doc":"Returns the number of occurrences of the given value in list.\n\nThe search can be narrowed to the selected sublist by the start and end indexes having the same semantics as in the [Get Slice From List](#Get%20Slice%20From%20List) keyword. The given list is never altered by this keyword.\n\nExample:\n\n```\n${x} =  Count Values In List  ${L3}  b\n```\n\n\\=>\n\n*   ${x} = 1\n*   ${L3} is not changed"},{"name":"Create Dictionary","args":"*key_value_pairs, **items","doc":"Creates and returns a dictionary based on given items.\n\nGiving items as key\\_value\\_pairs means giving keys and values as separate arguments:\n\n```\n${x} =  Create Dictionary  name  value    \n${y} =  Create Dictionary  a  1  b  ${2}\n```\n\n\\=>\n\n*   ${x} = {'name': 'value'}\n*   ${y} = {'a': '1', 'b': 2}\n\nStarting from Robot Framework 2.8.1, items can also be given as kwargs:\n\n```\n${x} =  Create Dictionary  name=value  \n${y} =  Create Dictionary  a=1  b=${2}\n```\n\nThe latter syntax is typically more convenient to use, but it has a limitation that keys must be strings."},{"name":"Dictionaries Should Be Equal","args":"dict1, dict2, msg=None, values=True","doc":"Fails if the given dictionaries are not equal.\n\nFirst the equality of dictionaries' keys is checked and after that all the key value pairs. If there are differences between the values, those are listed in the error message.\n\nSee [Lists Should Be Equal](#Lists%20Should%20Be%20Equal) for an explanation of msg. The given dictionaries are never altered by this keyword."},{"name":"Dictionary Should Contain Item","args":"dictionary, key, value, msg=None","doc":"An item of key/value must be found in a dictionary.\n\nValue is converted to unicode for comparison.\n\nSee [Lists Should Be Equal](#Lists%20Should%20Be%20Equal) for an explanation of msg. The given dictionary is never altered by this keyword."},{"name":"Dictionary Should Contain Key","args":"dictionary, key, msg=None","doc":"Fails if key is not found from dictionary.\n\nSee [List Should Contain Value](#List%20Should%20Contain%20Value) for an explanation of msg.\n\nThe given dictionary is never altered by this keyword."},{"name":"Dictionary Should Contain Sub Dictionary","args":"dict1, dict2, msg=None, values=True","doc":"Fails unless all items in dict2 are found from dict1.\n\nSee [Lists Should Be Equal](#Lists%20Should%20Be%20Equal) for an explanation of msg. The given dictionaries are never altered by this keyword."},{"name":"Dictionary Should Contain Value","args":"dictionary, value, msg=None","doc":"Fails if value is not found from dictionary.\n\nSee [List Should Contain Value](#List%20Should%20Contain%20Value) for an explanation of msg.\n\nThe given dictionary is never altered by this keyword."},{"name":"Dictionary Should Not Contain Key","args":"dictionary, key, msg=None","doc":"Fails if key is found from dictionary.\n\nSee [List Should Contain Value](#List%20Should%20Contain%20Value) for an explanation of msg.\n\nThe given dictionary is never altered by this keyword."},{"name":"Dictionary Should Not Contain Value","args":"dictionary, value, msg=None","doc":"Fails if value is found from dictionary.\n\nSee [List Should Contain Value](#List%20Should%20Contain%20Value) for an explanation of msg.\n\nThe given dictionary is never altered by this keyword."},{"name":"Get Dictionary Items","args":"dictionary","doc":"Returns items of the given dictionary.\n\nItems are returned sorted by keys. The given dictionary is not altered by this keyword.\n\nExample:\n\n```\n${items} =  Get Dictionary Items  ${D3}\n```\n\n\\=>\n\n*   ${items} = \\['a', 1, 'b', 2, 'c', 3\\]"},{"name":"Get Dictionary Keys","args":"dictionary","doc":"Returns keys of the given dictionary.\n\nKeys are returned in sorted order. The given dictionary is never altered by this keyword.\n\nExample:\n\n```\n${keys} =  Get Dictionary Keys  ${D3}\n```\n\n\\=>\n\n*   ${keys} = \\['a', 'b', 'c'\\]"},{"name":"Get Dictionary Values","args":"dictionary","doc":"Returns values of the given dictionary.\n\nValues are returned sorted according to keys. The given dictionary is never altered by this keyword.\n\nExample:\n\n```\n${values} =  Get Dictionary Values  ${D3}\n```\n\n\\=>\n\n*   ${values} = \\[1, 2, 3\\]"},{"name":"Get From Dictionary","args":"dictionary, key","doc":"Returns a value from the given dictionary based on the given key.\n\nIf the given key cannot be found from the dictionary, this keyword fails.\n\nThe given dictionary is never altered by this keyword.\n\nExample:\n\n```\n${value} =  Get From Dictionary  ${D3}  b\n```\n\n\\=>\n\n*   ${value} = 2"},{"name":"Get From List","args":"list_, index","doc":"Returns the value specified with an index from list.\n\nThe given list is never altered by this keyword.\n\nIndex '0' means the first position, '1' the second, and so on. Similarly, '-1' is the last position, '-2' the second last, and so on. Using an index that does not exist on the list causes an error. The index can be either an integer or a string that can be converted to an integer.\n\nExamples (including Python equivalents in comments):\n\n```\n${x} =  Get From List  ${L5}  0  # L5[0]\n${y} =  Get From List  ${L5}  -2  # L5[-2]\n```\n\n\\=>\n\n*   ${x} = 'a'\n*   ${y} = 'd'\n*   ${L5} is not changed"},{"name":"Get Index From List","args":"list_, value, start=0, end=None","doc":"Returns the index of the first occurrence of the value on the list.\n\nThe search can be narrowed to the selected sublist by the start and end indexes having the same semantics as in the [Get Slice From List](#Get%20Slice%20From%20List) keyword. In case the value is not found, -1 is returned. The given list is never altered by this keyword.\n\nExample:\n\n```\n${x} =  Get Index From List  ${L5}  d\n```\n\n\\=>\n\n*   ${x} = 3\n*   ${L5} is not changed"},{"name":"Get Match Count","args":"list, pattern, case_insensitive=False, whitespace_insensitive=False","doc":"Returns the count of matches to pattern in list.\n\nFor more information on pattern, case\\_insensitive, and whitespace\\_insensitive, see [Should Contain Match](#Should%20Contain%20Match).\n\nExamples:\n\n```\n${count}=  Get Match Count  ${list}  a*  # ${count} will be the count of strings beginning with 'a'  \n${count}=  Get Match Count  ${list}  regexp=a.*  # ${matches} will be the count of strings beginning with 'a' (regexp version)  \n${count}=  Get Match Count  ${list}  a*  case_insensitive=${True}  # ${matches} will be the count of strings beginning with 'a' or 'A'\n```\n\nNew in Robot Framework 2.8.6."},{"name":"Get Matches","args":"list, pattern, case_insensitive=False, whitespace_insensitive=False","doc":"Returns a list of matches to pattern in list.\n\nFor more information on pattern, case\\_insensitive, and whitespace\\_insensitive, see [Should Contain Match](#Should%20Contain%20Match).\n\nExamples:\n\n```\n${matches}=  Get Matches  ${list}  a*  # ${matches} will contain any string beginning with 'a'  \n${matches}=  Get Matches  ${list}  regexp=a.*  # ${matches} will contain any string beginning with 'a' (regexp version)  \n${matches}=  Get Matches  ${list}  a*  case_insensitive=${True}  # ${matches} will contain any string beginning with 'a' or 'A'\n```\n\nNew in Robot Framework 2.8.6."},{"name":"Get Slice From List","args":"list_, start=0, end=None","doc":"Returns a slice of the given list between start and end indexes.\n\nThe given list is never altered by this keyword.\n\nIf both start and end are given, a sublist containing values from start to end is returned. This is the same as 'list\\[start:end\\]' in Python. To get all items from the beginning, use 0 as the start value, and to get all items until the end, use 'None' as the end value. 'None' is also a default value, so in this case, it is enough to give only start. If only end is given, start gets the value 0.\n\nUsing start or end not found on the list is the same as using the largest (or smallest) available index.\n\nExamples (incl. Python equivelants in comments):\n\n```\n${x} =  Get Slice From List  ${L5}  2  4  # L5[2:4]\n${y} =  Get Slice From List  ${L5}  1    # L5[1:None]\n${z} =  Get Slice From List  ${L5}    -2  # L5[0:-2]\n```\n\n\\=>\n\n*   ${x} = \\['c', 'd'\\]\n*   ${y} = \\['b', 'c', 'd', 'e'\\]\n*   ${z} = \\['a', 'b', 'c'\\]\n*   ${L5} is not changed"},{"name":"Insert Into List","args":"list_, index, value","doc":"Inserts value into list to the position specified with index.\n\nIndex '0' adds the value into the first position, '1' to the second, and so on. Inserting from right works with negative indices so that '-1' is the second last position, '-2' third last, and so on. Use [Append To List](#Append%20To%20List) to add items to the end of the list.\n\nIf the absolute value of the index is greater than the length of the list, the value is added at the end (positive index) or the beginning (negative index). An index can be given either as an integer or a string that can be converted to an integer.\n\nExample:\n\n```\nInsert Into List  ${L1}  0  xxx\nInsert Into List  ${L2}  ${-1}  xxx\n```\n\n\\=>\n\n*   ${L1} = \\['xxx', 'a'\\]\n*   ${L2} = \\['a', 'xxx', 'b'\\]"},{"name":"Keep In Dictionary","args":"dictionary, *keys","doc":"Keeps the given keys in the dictionary and removes all other.\n\nIf the given key cannot be found from the dictionary, it is ignored.\n\nExample:\n\n```\nKeep In Dictionary  ${D5}  b  x  d\n```\n\n\\=>\n\n*   ${D5} = {'b': 2, 'd': 4}"},{"name":"List Should Contain Sub List","args":"list1, list2, msg=None, values=True","doc":"Fails if not all of the elements in list2 are found in list1.\n\nThe order of values and the number of values are not taken into account.\n\nSee the use of msg and values from the [Lists Should Be Equal](#Lists%20Should%20Be%20Equal) keyword."},{"name":"List Should Contain Value","args":"list_, value, msg=None","doc":"Fails if the value is not found from list.\n\nIf msg is not given, the default error message \"[b | c](a) does not contain the value 'x'\" is shown in case of a failure. Otherwise, the given msg is used in case of a failure."},{"name":"List Should Not Contain Duplicates","args":"list_, msg=None","doc":"Fails if any element in the list is found from it more than once.\n\nThe default error message lists all the elements that were found from the list multiple times, but it can be overridden by giving a custom msg. All multiple times found items and their counts are also logged.\n\nThis keyword works with all iterables that can be converted to a list. The original iterable is never altered."},{"name":"List Should Not Contain Value","args":"list_, value, msg=None","doc":"Fails if the value is not found from list.\n\nSee [List Should Contain Value](#List%20Should%20Contain%20Value) for an explanation of msg."},{"name":"Lists Should Be Equal","args":"list1, list2, msg=None, values=True, names=None","doc":"Fails if given lists are unequal.\n\nThe keyword first verifies that the lists have equal lengths, and then it checks are all their values equal. Possible differences between the values are listed in the default error message like Index 4: ABC != Abc.\n\nThe error message can be configured using msg and values arguments:\n\n*   If msg is not given, the default error message is used.\n*   If msg is given and values is either Boolean False or a string 'False' or 'No Values', the error message is simply msg.\n*   Otherwise the error message is msg + 'new line' + default.\n\nOptional names argument (new in 2.6) can be used for naming the indices shown in the default error message. It can either be a list of names matching the indices in the lists or a dictionary where keys are indices that need to be named. It is not necessary to name all of the indices. When using a dictionary, keys can be either integers or strings that can be converted to integers.\n\nExamples:\n\n```\n${names} =  Create List  First Name  Family Name  Email  \nLists Should Be Equal  ${people1}  ${people2}  names=${names}    \n${names} =  Create Dictionary  0  First Name  2  Email\nLists Should Be Equal  ${people1}  ${people2}  names=${names}    \n```\n\nIf the items in index 2 would differ in the above examples, the error message would contain a row like Index 2 (email): name@foo.com != name@bar.com."},{"name":"Log Dictionary","args":"dictionary, level=INFO","doc":"Logs the size and contents of the dictionary using given level.\n\nValid levels are TRACE, DEBUG, INFO (default), and WARN.\n\nIf you only want to log the size, use keyword Get Length from the BuiltIn library."},{"name":"Log List","args":"list_, level=INFO","doc":"Logs the length and contents of the list using given level.\n\nValid levels are TRACE, DEBUG, INFO (default), and WARN.\n\nIf you only want to the length, use keyword Get Length from the BuiltIn library."},{"name":"Remove Duplicates","args":"list_","doc":"Returns a list without duplicates based on the given list.\n\nCreates and returns a new list that contains all items in the given list so that one item can appear only once. Order of the items in the new list is the same as in the original except for missing duplicates. Number of the removed duplicates is logged.\n\nNew in Robot Framework 2.7.5."},{"name":"Remove From Dictionary","args":"dictionary, *keys","doc":"Removes the given keys from the dictionary.\n\nIf the given key cannot be found from the dictionary, it is ignored.\n\nExample:\n\n```\nRemove From Dictionary  ${D3}  b  x  y\n```\n\n\\=>\n\n*   ${D3} = {'a': 1, 'c': 3}"},{"name":"Remove From List","args":"list_, index","doc":"Removes and returns the value specified with an index from list.\n\nIndex '0' means the first position, '1' the second and so on. Similarly, '-1' is the last position, '-2' the second last, and so on. Using an index that does not exist on the list causes an error. The index can be either an integer or a string that can be converted to an integer.\n\nExample:\n\n```\n${x} =  Remove From List  ${L2}  0\n```\n\n\\=>\n\n*   ${x} = 'a'\n*   ${L2} = \\['b'\\]"},{"name":"Remove Values From List","args":"list_, *values","doc":"Removes all occurences of given values from list.\n\nIt is not an error is a value does not exist in the list at all.\n\nExample:\n\n```\nRemove Values From List  ${L4}  a  c  e  f\n```\n\n\\=>\n\n*   ${L4} = \\['b', 'd'\\]"},{"name":"Reverse List","args":"list_","doc":"Reverses the given list in place.\n\nNote that the given list is changed and nothing is returned. Use [Copy List](#Copy%20List) first, if you need to keep also the original order.\n\n```\nReverse List  ${L3}\n```\n\n\\=>\n\n*   ${L3} = \\['c', 'b', 'a'\\]"},{"name":"Set List Value","args":"list_, index, value","doc":"Sets the value of list specified by index to the given value.\n\nIndex '0' means the first position, '1' the second and so on. Similarly, '-1' is the last position, '-2' second last, and so on. Using an index that does not exist on the list causes an error. The index can be either an integer or a string that can be converted to an integer.\n\nExample:\n\n```\nSet List Value  ${L3}  1  xxx\nSet List Value  ${L3}  -1  yyy\n```\n\n\\=>\n\n*   ${L3} = \\['a', 'xxx', 'yyy'\\]"},{"name":"Set To Dictionary","args":"dictionary, *key_value_pairs, **items","doc":"Adds the given key\\_value\\_pairs and items to the dictionary.\n\nSee [Create Dictionary](#Create%20Dictionary) for information about giving items. If the given key already exist in the dictionary, its value is updated.\n\nExample:\n\n```\nSet To Dictionary  ${D1}  key  value\n```\n\n\\=>\n\n*   ${D1} = {'a': 1, 'key': 'value'}"},{"name":"Should Contain Match","args":"list, pattern, msg=None, case_insensitive=False, whitespace_insensitive=False","doc":"Fails if pattern is not found in list.\n\nSee [List Should Contain Value](#List%20Should%20Contain%20Value) for an explanation of msg.\n\nBy default, pattern matching is similar to matching files in a shell and is case-sensitive and whitespace-sensitive. In the pattern syntax, '\\*' matches to anything and '?' matches to any single character. You can also prepend 'glob=' to your pattern to explicitly use this pattern matching behavior.\n\nIf you prepend 'regexp=' to your pattern, your pattern will be used according to the Python [re module](http://docs.python.org/2/library/re.html) regular expression syntax. Important note: Backslashes are an escape character, and must be escaped with another backslash (e.g. 'regexp=\\\\\\\\d{6}' to search for '\\\\d{6}'). See BuiltIn.Should Match Regexp for more details.\n\nIf case\\_insensitive is True, the pattern matching will ignore case.\n\nIf whitespace\\_insensitive is True, the pattern matching will ignore whitespace.\n\nNon-string values in lists are ignored when matching patterns.\n\nThe given list is never altered by this keyword.\n\nSee also [Should Not Contain Match](#Should%20Not%20Contain%20Match).\n\nExamples:\n\n```\nShould Contain Match  ${list}  a*  # List should contain any string beginning with 'a'    \nShould Contain Match  ${list}  regexp=a.*  # List should contain any string beginning with 'a' (regexp version)    \nShould Contain Match  ${list}  regexp=\\\\d{6}  # List should contain any string which contains six decimal digits    \nShould Contain Match  ${list}  a*  case_insensitive=${True}  # List should contain any string beginning with 'a' or 'A'  \nShould Contain Match  ${list}  ab*  whitespace_insensitive=${True}  # List should contain any string beginning with 'ab' or 'a b' or any other combination of whitespace  \nShould Contain Match  ${list}  ab*  whitespace_insensitive=${True}  case_insensitive=${True}  # List should contain any string beginning with 'ab' or 'a b' or 'AB' or 'A B' or any other combination of whitespace and upper/lower case 'a' and 'b'\n```\n\nNew in Robot Framework 2.8.6."},{"name":"Should Not Contain Match","args":"list, pattern, msg=None, case_insensitive=False, whitespace_insensitive=False","doc":"Fails if pattern is found in list.\n\nSee [List Should Contain Value](#List%20Should%20Contain%20Value) for an explanation of msg.\n\nSee [Should Contain Match](#Should%20Contain%20Match) for usage details and examples.\n\nNew in Robot Framework 2.8.6."},{"name":"Sort List","args":"list_","doc":"Sorts the given list in place.\n\nThe strings are sorted alphabetically and the numbers numerically.\n\nNote that the given list is changed and nothing is returned. Use [Copy List](#Copy%20List) first, if you need to keep also the original order.\n\n${L} = \\[2,1,'a','c','b'\\]\n\n```\nSort List  ${L}\n```\n\n\\=>\n\n*   ${L} = \\[1, 2, 'a', 'b', 'c'\\]"}]}