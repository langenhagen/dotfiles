{"name": "Collections", "version": "3.1.1", "keywords": [{"name": "Append To List", "args": ["list_", "*values"], "doc": "Adds ``values`` to the end of ``list``.\n\nExample:\n| Append To List | ${L1} | xxx |   |   |\n| Append To List | ${L2} | x   | y | z |\n=>\n| ${L1} = ['a', 'xxx']\n| ${L2} = ['a', 'b', 'x', 'y', 'z']"}, {"name": "Combine Lists", "args": ["*lists"], "doc": "Combines the given ``lists`` together and returns the result.\n\nThe given lists are not altered by this keyword.\n\nExample:\n| ${x} = | Combine List | ${L1} | ${L2} |       |\n| ${y} = | Combine List | ${L1} | ${L2} | ${L1} |\n=>\n| ${x} = ['a', 'a', 'b']\n| ${y} = ['a', 'a', 'b', 'a']\n| ${L1} and ${L2} are not changed."}, {"name": "Convert To Dictionary", "args": ["item"], "doc": "Converts the given ``item`` to a Python ``dict`` type.\n\nMainly useful for converting other mappings to dictionaries. Use\n`Create Dictionary` from the BuiltIn library for constructing new\ndictionaries.\n\nNew in Robot Framework 2.9."}, {"name": "Convert To List", "args": ["item"], "doc": "Converts the given ``item`` to a Python ``list`` type.\n\nMainly useful for converting tuples and other iterable to lists.\nUse `Create List` from the BuiltIn library for constructing new lists."}, {"name": "Copy Dictionary", "args": ["dictionary"], "doc": "Returns a copy of the given dictionary.\n\nThe given dictionary is never altered by this keyword."}, {"name": "Copy List", "args": ["list_"], "doc": "Returns a copy of the given list.\n\nThe given list is never altered by this keyword."}, {"name": "Count Values In List", "args": ["list_", "value", "start=0", "end=None"], "doc": "Returns the number of occurrences of the given ``value`` in ``list``.\n\nThe search can be narrowed to the selected sublist by the ``start`` and\n``end`` indexes having the same semantics as with `Get Slice From List`\nkeyword. The given list is never altered by this keyword.\n\nExample:\n| ${x} = | Count Values In List | ${L3} | b |\n=>\n| ${x} = 1\n| ${L3} is not changed"}, {"name": "Dictionaries Should Be Equal", "args": ["dict1", "dict2", "msg=None", "values=True"], "doc": "Fails if the given dictionaries are not equal.\n\nFirst the equality of dictionaries' keys is checked and after that all\nthe key value pairs. If there are differences between the values, those\nare listed in the error message. The types of the dictionaries do not\nneed to be same.\n\nSee `Lists Should Be Equal` for more information about configuring\nthe error message with ``msg`` and ``values`` arguments.\n\nThe given dictionaries are never altered by this keyword."}, {"name": "Dictionary Should Contain Item", "args": ["dictionary", "key", "value", "msg=None"], "doc": "An item of ``key`` / ``value`` must be found in a ``dictionary``.\n\nValue is converted to unicode for comparison.\n\nSee `Lists Should Be Equal` for an explanation of ``msg``.\nThe given dictionary is never altered by this keyword."}, {"name": "Dictionary Should Contain Key", "args": ["dictionary", "key", "msg=None"], "doc": "Fails if ``key`` is not found from ``dictionary``.\n\nSee `List Should Contain Value` for an explanation of ``msg``.\n\nThe given dictionary is never altered by this keyword."}, {"name": "Dictionary Should Contain Sub Dictionary", "args": ["dict1", "dict2", "msg=None", "values=True"], "doc": "Fails unless all items in ``dict2`` are found from ``dict1``.\n\nSee `Lists Should Be Equal` for more information about configuring\nthe error message with ``msg`` and ``values`` arguments.\n\nThe given dictionaries are never altered by this keyword."}, {"name": "Dictionary Should Contain Value", "args": ["dictionary", "value", "msg=None"], "doc": "Fails if ``value`` is not found from ``dictionary``.\n\nSee `List Should Contain Value` for an explanation of ``msg``.\n\nThe given dictionary is never altered by this keyword."}, {"name": "Dictionary Should Not Contain Key", "args": ["dictionary", "key", "msg=None"], "doc": "Fails if ``key`` is found from ``dictionary``.\n\nSee `List Should Contain Value` for an explanation of ``msg``.\n\nThe given dictionary is never altered by this keyword."}, {"name": "Dictionary Should Not Contain Value", "args": ["dictionary", "value", "msg=None"], "doc": "Fails if ``value`` is found from ``dictionary``.\n\nSee `List Should Contain Value` for an explanation of ``msg``.\n\nThe given dictionary is never altered by this keyword."}, {"name": "Get Dictionary Items", "args": ["dictionary"], "doc": "Returns items of the given ``dictionary``.\n\nItems are returned sorted by keys. The given ``dictionary`` is not\naltered by this keyword.\n\nExample:\n| ${items} = | Get Dictionary Items | ${D3} |\n=>\n| ${items} = ['a', 1, 'b', 2, 'c', 3]"}, {"name": "Get Dictionary Keys", "args": ["dictionary"], "doc": "Returns keys of the given ``dictionary``.\n\nIf keys are sortable, they are returned in sorted order. The given\n``dictionary`` is never altered by this keyword.\n\nExample:\n| ${keys} = | Get Dictionary Keys | ${D3} |\n=>\n| ${keys} = ['a', 'b', 'c']"}, {"name": "Get Dictionary Values", "args": ["dictionary"], "doc": "Returns values of the given dictionary.\n\nValues are returned sorted according to keys. The given dictionary is\nnever altered by this keyword.\n\nExample:\n| ${values} = | Get Dictionary Values | ${D3} |\n=>\n| ${values} = [1, 2, 3]"}, {"name": "Get From Dictionary", "args": ["dictionary", "key"], "doc": "Returns a value from the given ``dictionary`` based on the given ``key``.\n\nIf the given ``key`` cannot be found from the ``dictionary``, this\nkeyword fails.\n\nThe given dictionary is never altered by this keyword.\n\nExample:\n| ${value} = | Get From Dictionary | ${D3} | b |\n=>\n| ${value} = 2"}, {"name": "Get From List", "args": ["list_", "index"], "doc": "Returns the value specified with an ``index`` from ``list``.\n\nThe given list is never altered by this keyword.\n\nIndex ``0`` means the first position, ``1`` the second, and so on.\nSimilarly, ``-1`` is the last position, ``-2`` the second last, and so on.\nUsing an index that does not exist on the list causes an error.\nThe index can be either an integer or a string that can be converted\nto an integer.\n\nExamples (including Python equivalents in comments):\n| ${x} = | Get From List | ${L5} | 0  | # L5[0]  |\n| ${y} = | Get From List | ${L5} | -2 | # L5[-2] |\n=>\n| ${x} = 'a'\n| ${y} = 'd'\n| ${L5} is not changed"}, {"name": "Get Index From List", "args": ["list_", "value", "start=0", "end=None"], "doc": "Returns the index of the first occurrence of the ``value`` on the list.\n\nThe search can be narrowed to the selected sublist by the ``start`` and\n``end`` indexes having the same semantics as with `Get Slice From List`\nkeyword. In case the value is not found, -1 is returned. The given list\nis never altered by this keyword.\n\nExample:\n| ${x} = | Get Index From List | ${L5} | d |\n=>\n| ${x} = 3\n| ${L5} is not changed"}, {"name": "Get Match Count", "args": ["list", "pattern", "case_insensitive=False", "whitespace_insensitive=False"], "doc": "Returns the count of matches to ``pattern`` in ``list``.\n\nFor more information on ``pattern``, ``case_insensitive``, and\n``whitespace_insensitive``, see `Should Contain Match`.\n\nExamples:\n| ${count}= | Get Match Count | ${list} | a* | # ${count} will be the count of strings beginning with 'a' |\n| ${count}= | Get Match Count | ${list} | regexp=a.* | # ${matches} will be the count of strings beginning with 'a' (regexp version) |\n| ${count}= | Get Match Count | ${list} | a* | case_insensitive=${True} | # ${matches} will be the count of strings beginning with 'a' or 'A' |"}, {"name": "Get Matches", "args": ["list", "pattern", "case_insensitive=False", "whitespace_insensitive=False"], "doc": "Returns a list of matches to ``pattern`` in ``list``.\n\nFor more information on ``pattern``, ``case_insensitive``, and\n``whitespace_insensitive``, see `Should Contain Match`.\n\nExamples:\n| ${matches}= | Get Matches | ${list} | a* | # ${matches} will contain any string beginning with 'a' |\n| ${matches}= | Get Matches | ${list} | regexp=a.* | # ${matches} will contain any string beginning with 'a' (regexp version) |\n| ${matches}= | Get Matches | ${list} | a* | case_insensitive=${True} | # ${matches} will contain any string beginning with 'a' or 'A' |"}, {"name": "Get Slice From List", "args": ["list_", "start=0", "end=None"], "doc": "Returns a slice of the given list between ``start`` and ``end`` indexes.\n\nThe given list is never altered by this keyword.\n\nIf both ``start`` and ``end`` are given, a sublist containing values\nfrom ``start`` to ``end`` is returned. This is the same as\n``list[start:end]`` in Python. To get all items from the beginning,\nuse 0 as the start value, and to get all items until and including\nthe end, use ``None`` (default) as the end value.\n\nUsing ``start`` or ``end`` not found on the list is the same as using\nthe largest (or smallest) available index.\n\nExamples (incl. Python equivalents in comments):\n| ${x} = | Get Slice From List | ${L5} | 2 | 4  | # L5[2:4]    |\n| ${y} = | Get Slice From List | ${L5} | 1 |    | # L5[1:None] |\n| ${z} = | Get Slice From List | ${L5} |   | -2 | # L5[0:-2]   |\n=>\n| ${x} = ['c', 'd']\n| ${y} = ['b', 'c', 'd', 'e']\n| ${z} = ['a', 'b', 'c']\n| ${L5} is not changed"}, {"name": "Insert Into List", "args": ["list_", "index", "value"], "doc": "Inserts ``value`` into ``list`` to the position specified with ``index``.\n\nIndex ``0`` adds the value into the first position, ``1`` to the second,\nand so on. Inserting from right works with negative indices so that\n``-1`` is the second last position, ``-2`` third last, and so on. Use\n`Append To List` to add items to the end of the list.\n\nIf the absolute value of the index is greater than\nthe length of the list, the value is added at the end\n(positive index) or the beginning (negative index). An index\ncan be given either as an integer or a string that can be\nconverted to an integer.\n\nExample:\n| Insert Into List | ${L1} | 0     | xxx |\n| Insert Into List | ${L2} | ${-1} | xxx |\n=>\n| ${L1} = ['xxx', 'a']\n| ${L2} = ['a', 'xxx', 'b']"}, {"name": "Keep In Dictionary", "args": ["dictionary", "*keys"], "doc": "Keeps the given ``keys`` in the ``dictionary`` and removes all other.\n\nIf the given ``key`` cannot be found from the ``dictionary``, it\nis ignored.\n\nExample:\n| Keep In Dictionary | ${D5} | b | x | d |\n=>\n| ${D5} = {'b': 2, 'd': 4}"}, {"name": "List Should Contain Sub List", "args": ["list1", "list2", "msg=None", "values=True"], "doc": "Fails if not all of the elements in ``list2`` are found in ``list1``.\n\nThe order of values and the number of values are not taken into\naccount.\n\nSee `Lists Should Be Equal` for more information about configuring\nthe error message with ``msg`` and ``values`` arguments."}, {"name": "List Should Contain Value", "args": ["list_", "value", "msg=None"], "doc": "Fails if the ``value`` is not found from ``list``.\n\nIf the keyword fails, the default error messages is ``<list> does\nnot contain value '<value>'``. A custom message can be given using\nthe ``msg`` argument."}, {"name": "List Should Not Contain Duplicates", "args": ["list_", "msg=None"], "doc": "Fails if any element in the ``list`` is found from it more than once.\n\nThe default error message lists all the elements that were found\nfrom the ``list`` multiple times, but it can be overridden by giving\na custom ``msg``. All multiple times found items and their counts are\nalso logged.\n\nThis keyword works with all iterables that can be converted to a list.\nThe original iterable is never altered."}, {"name": "List Should Not Contain Value", "args": ["list_", "value", "msg=None"], "doc": "Fails if the ``value`` is found from ``list``.\n\nSee `List Should Contain Value` for an explanation of ``msg``."}, {"name": "Lists Should Be Equal", "args": ["list1", "list2", "msg=None", "values=True", "names=None"], "doc": "Fails if given lists are unequal.\n\nThe keyword first verifies that the lists have equal lengths, and then\nit checks are all their values equal. Possible differences between the\nvalues are listed in the default error message like ``Index 4: ABC !=\nAbc``. The types of the lists do not need to be the same. For example,\nPython tuple and list with same content are considered equal.\n\n\nThe error message can be configured using ``msg`` and ``values``\narguments:\n- If ``msg`` is not given, the default error message is used.\n- If ``msg`` is given and ``values`` gets a value considered true\n  (see `Boolean arguments`), the error message starts with the given\n  ``msg`` followed by a newline and the default message.\n- If ``msg`` is given and ``values``  is not given a true value,\n  the error message is just the given ``msg``.\n\nOptional ``names`` argument can be used for naming the indices shown in\nthe default error message. It can either be a list of names matching\nthe indices in the lists or a dictionary where keys are indices that\nneed to be named. It is not necessary to name all of the indices.  When\nusing a dictionary, keys can be either integers or strings that can be\nconverted to integers.\n\nExamples:\n| ${names} = | Create List | First Name | Family Name | Email |\n| Lists Should Be Equal | ${people1} | ${people2} | names=${names} |\n| ${names} = | Create Dictionary | 0=First Name | 2=Email |\n| Lists Should Be Equal | ${people1} | ${people2} | names=${names} |\n\nIf the items in index 2 would differ in the above examples, the error\nmessage would contain a row like ``Index 2 (email): name@foo.com !=\nname@bar.com``."}, {"name": "Log Dictionary", "args": ["dictionary", "level=INFO"], "doc": "Logs the size and contents of the ``dictionary`` using given ``level``.\n\nValid levels are TRACE, DEBUG, INFO (default), and WARN.\n\nIf you only want to log the size, use keyword `Get Length` from\nthe BuiltIn library."}, {"name": "Log List", "args": ["list_", "level=INFO"], "doc": "Logs the length and contents of the ``list`` using given ``level``.\n\nValid levels are TRACE, DEBUG, INFO (default), and WARN.\n\nIf you only want to the length, use keyword `Get Length` from\nthe BuiltIn library."}, {"name": "Pop From Dictionary", "args": ["dictionary", "key", "default="], "doc": "Pops the given ``key`` from the ``dictionary`` and returns its value.\n\nBy default the keyword fails if the given ``key`` cannot be found from\nthe ``dictionary``. If optional ``default`` value is given, it will be\nreturned instead of failing.\n\nExample:\n| ${val}= | Pop From Dictionary | ${D3} | b |\n=>\n| ${val} = 2\n| ${D3} = {'a': 1, 'c': 3}\n\nNew in Robot Framework 2.9.2."}, {"name": "Remove Duplicates", "args": ["list_"], "doc": "Returns a list without duplicates based on the given ``list``.\n\nCreates and returns a new list that contains all items in the given\nlist so that one item can appear only once. Order of the items in\nthe new list is the same as in the original except for missing\nduplicates. Number of the removed duplicates is logged."}, {"name": "Remove From Dictionary", "args": ["dictionary", "*keys"], "doc": "Removes the given ``keys`` from the ``dictionary``.\n\nIf the given ``key`` cannot be found from the ``dictionary``, it\nis ignored.\n\nExample:\n| Remove From Dictionary | ${D3} | b | x | y |\n=>\n| ${D3} = {'a': 1, 'c': 3}"}, {"name": "Remove From List", "args": ["list_", "index"], "doc": "Removes and returns the value specified with an ``index`` from ``list``.\n\nIndex ``0`` means the first position, ``1`` the second and so on.\nSimilarly, ``-1`` is the last position, ``-2`` the second last, and so on.\nUsing an index that does not exist on the list causes an error.\nThe index can be either an integer or a string that can be converted\nto an integer.\n\nExample:\n| ${x} = | Remove From List | ${L2} | 0 |\n=>\n| ${x} = 'a'\n| ${L2} = ['b']"}, {"name": "Remove Values From List", "args": ["list_", "*values"], "doc": "Removes all occurrences of given ``values`` from ``list``.\n\nIt is not an error if a value does not exist in the list at all.\n\nExample:\n| Remove Values From List | ${L4} | a | c | e | f |\n=>\n| ${L4} = ['b', 'd']"}, {"name": "Reverse List", "args": ["list_"], "doc": "Reverses the given list in place.\n\nNote that the given list is changed and nothing is returned. Use\n`Copy List` first, if you need to keep also the original order.\n\n| Reverse List | ${L3} |\n=>\n| ${L3} = ['c', 'b', 'a']"}, {"name": "Set List Value", "args": ["list_", "index", "value"], "doc": "Sets the value of ``list`` specified by ``index`` to the given ``value``.\n\nIndex ``0`` means the first position, ``1`` the second and so on.\nSimilarly, ``-1`` is the last position, ``-2`` second last, and so on.\nUsing an index that does not exist on the list causes an error.\nThe index can be either an integer or a string that can be converted to\nan integer.\n\nExample:\n| Set List Value | ${L3} | 1  | xxx |\n| Set List Value | ${L3} | -1 | yyy |\n=>\n| ${L3} = ['a', 'xxx', 'yyy']"}, {"name": "Set To Dictionary", "args": ["dictionary", "*key_value_pairs", "**items"], "doc": "Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.\n\nGiving items as ``key_value_pairs`` means giving keys and values\nas separate arguments:\n\n| Set To Dictionary | ${D1} | key | value | second | ${2} |\n=>\n| ${D1} = {'a': 1, 'key': 'value', 'second': 2}\n\n| Set To Dictionary | ${D1} | key=value | second=${2} |\n\nThe latter syntax is typically more convenient to use, but it has\na limitation that keys must be strings.\n\nIf given keys already exist in the dictionary, their values are updated."}, {"name": "Should Contain Match", "args": ["list", "pattern", "msg=None", "case_insensitive=False", "whitespace_insensitive=False"], "doc": "Fails if ``pattern`` is not found in ``list``.\n\nSee `List Should Contain Value` for an explanation of ``msg``.\n\nBy default, pattern matching is similar to matching files in a shell\nand is case-sensitive and whitespace-sensitive. In the pattern syntax,\n``*`` matches to anything and ``?`` matches to any single character. You\ncan also prepend ``glob=`` to your pattern to explicitly use this pattern\nmatching behavior.\n\nIf you prepend ``regexp=`` to your pattern, your pattern will be used\naccording to the Python\n[http://docs.python.org/library/re.html|re module] regular expression\nsyntax. Important note: Backslashes are an escape character, and must\nbe escaped with another backslash (e.g. ``regexp=\\\\d{6}`` to search for\n``\\d{6}``). See `BuiltIn.Should Match Regexp` for more details.\n\nIf ``case_insensitive`` is given a true value (see `Boolean arguments`),\nthe pattern matching will ignore case.\n\nIf ``whitespace_insensitive`` is given a true value (see `Boolean\narguments`), the pattern matching will ignore whitespace.\n\nNon-string values in lists are ignored when matching patterns.\n\nThe given list is never altered by this keyword.\n\nSee also ``Should Not Contain Match``.\n\nExamples:\n| Should Contain Match | ${list} | a*              | | | # Match strings beginning with 'a'. |\n| Should Contain Match | ${list} | regexp=a.*      | | | # Same as the above but with regexp. |\n| Should Contain Match | ${list} | regexp=\\\\d{6} | | | # Match strings containing six digits. |\n| Should Contain Match | ${list} | a*  | case_insensitive=True       | | # Match strings beginning with 'a' or 'A'. |\n| Should Contain Match | ${list} | ab* | whitespace_insensitive=yes  | | # Match strings beginning with 'ab' with possible whitespace ignored. |\n| Should Contain Match | ${list} | ab* | whitespace_insensitive=true | case_insensitive=true | # Same as the above but also ignore case. |"}, {"name": "Should Not Contain Match", "args": ["list", "pattern", "msg=None", "case_insensitive=False", "whitespace_insensitive=False"], "doc": "Fails if ``pattern`` is found in ``list``.\n\nExact opposite of `Should Contain Match` keyword. See that keyword\nfor information about arguments and usage in general."}, {"name": "Sort List", "args": ["list_"], "doc": "Sorts the given list in place.\n\nThe strings are sorted alphabetically and the numbers numerically.\n\nNote that the given list is changed and nothing is returned. Use\n`Copy List` first, if you need to keep also the original order.\n\n${L} = [2,1,'a','c','b']\n| Sort List | ${L} |\n=>\n| ${L} = [1, 2, 'a', 'b', 'c']"}]}