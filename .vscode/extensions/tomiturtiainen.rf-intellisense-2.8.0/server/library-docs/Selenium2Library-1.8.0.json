{"name":"Selenium2Library","version":"1.8.0","keywords":[{"name":"Add Cookie","args":["name","value","path=None","domain=None","secure=None","expiry=None"],"doc":"Adds a cookie to your current session. \"name\" and \"value\" are required, \"path\", \"domain\" and \"secure\" are optional"},{"name":"Add Location Strategy","args":["strategy_name","strategy_keyword","persist=False"],"doc":"Adds a custom location strategy based on a user keyword. Location strategies are automatically removed after leaving the current scope by default. Setting persist to any non-empty string will cause the location strategy to stay registered throughout the life of the test.\n\nTrying to add a custom location strategy with the same name as one that already exists will cause the keyword to fail.\n\nCustom locator keyword example:\n\n```\nCustom Locator Strategy  [Arguments]  ${browser}  ${criteria}  ${tag}  ${constraints}\n  ${retVal}=  Execute Javascript  return window.document.getElementById('${criteria}');    \n  [Return]  ${retVal}      \n```\n\nUsage example:\n\n```\nAdd Location Strategy  custom  Custom Locator Strategy\nPage Should Contain Element  custom=my_id  \n```\n\nSee [Remove Location Strategy](#Remove%20Location%20Strategy) for details about removing a custom location strategy."},{"name":"Alert Should Be Present","args":["text="],"doc":"Verifies an alert is present and dismisses it.\n\nIf text is a non-empty string, then it is also verified that the message of the alert equals to text.\n\nWill fail if no alert is present. Note that following keywords will fail unless the alert is dismissed by this keyword or another like [Get Alert Message](#Get%20Alert%20Message)."},{"name":"Assign Id To Element","args":["locator","id"],"doc":"Assigns a temporary identifier to element specified by locator.\n\nThis is mainly useful if the locator is complicated/slow XPath expression. Identifier expires when the page is reloaded.\n\nExample:\n\n```\nAssign ID to Element  xpath=//div[@id=\"first_div\"]  my id\nPage Should Contain Element  my id  \n```"},{"name":"Capture Page Screenshot","args":["filename=selenium-screenshot-{index}.png"],"doc":"Takes a screenshot of the current page and embeds it into the log.\n\n`filename` argument specifies the name of the file to write the screenshot into. If no `filename` is given, the screenshot is saved into file _selenium-screenshot-{index}.png_ under the directory where the Robot Framework log file is written into. The `filename` is also considered relative to the same directory, if it is not given in absolute format. If an absolute or relative path is given but the path does not exist it will be created.\n\nStarting from Selenium2Library 1.8 if `filename` contains _{index}_ characters, it will be automatically replaced with running index. The running index is unique for each different filename. The absolute path of the saved screenshot is always returned and it does not depend does the `filename` contain _{index}_. See example 1 and 2 for more details.\n\nThe _{index}_ is replaced with the actual index by using Python's [str.format](https://docs.python.org/2/library/stdtypes.html#str.format) method, and it can be formatted using the standard [format string syntax](https://docs.python.org/2/library/string.html#format-string-syntax). The example 3 shows this by setting the width and the fill character.\n\nIf there is a need to write literal _{index}_ or if `filename` contains _{_ or _}_ characters, then the braces must be doubled.\n\nExample 1:\n\n```\n${file1} =  Capture Page Screenshot  \nFile Should Exist  ${OUTPUTDIR}${/}selenium-screenshot-1.png  \nShould Be Equal  ${file1}  ${OUTPUTDIR}${/}selenium-screenshot-1.png\n${file2} =  Capture Page Screenshot  \nFile Should Exist  ${OUTPUTDIR}${/}selenium-screenshot-2.png  \nShould Be Equal  ${file2}  ${OUTPUTDIR}${/}selenium-screenshot-2.png\n```\n\nExample 2:\n\n```\n${file1} =  Capture Page Screenshot  ${OTHER_DIR}${/}other-{index}-name.png\n${file2} =  Capture Page Screenshot  ${OTHER_DIR}${/}some-other-name-{index}.png\n${file3} =  Capture Page Screenshot  ${OTHER_DIR}${/}other-{index}-name.png\nFile Should Exist  ${OTHER_DIR}${/}other-1-name.png  \nShould Be Equal  ${file1}  ${OTHER_DIR}${/}other-1-name.png\nFile Should Exist  ${OTHER_DIR}${/}some-other-name-1.png  \nShould Be Equal  ${file2}  ${OTHER_DIR}${/}some-other-name-1.png\nFile Should Exist  ${OTHER_DIR}${/}other-2-name.png  \nShould Be Equal  ${file3}  ${OTHER_DIR}${/}other-2-name.png\n```\n\nExample 3:\n\n```\nCapture Page Screenshot  ${OTHER_DIR}${/}sc-{index:06}.png\nFile Should Exist  ${OTHER_DIR}${/}sc-000001.png\n```"},{"name":"Checkbox Should Be Selected","args":["locator"],"doc":"Verifies checkbox identified by locator is selected/checked.\n\nKey attributes for checkboxes are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Checkbox Should Not Be Selected","args":["locator"],"doc":"Verifies checkbox identified by locator is not selected/checked.\n\nKey attributes for checkboxes are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Choose Cancel On Next Confirmation","args":[],"doc":"Cancel will be selected the next time [Confirm Action](#Confirm%20Action) is used."},{"name":"Choose File","args":["locator","file_path"],"doc":"Inputs the file\\_path into file input field found by locator.\n\nThis keyword is most often used to input files into upload forms. The file specified with file\\_path must be available on the same host where the Selenium Server is running.\n\nExample:\n\n```\nChoose File  my_upload_field  /home/user/files/trades.csv\n```"},{"name":"Choose Ok On Next Confirmation","args":[],"doc":"Undo the effect of using keywords [Choose Cancel On Next Confirmation](#Choose%20Cancel%20On%20Next%20Confirmation). Note that Selenium's overridden window.confirm() function will normally automatically return true, as if the user had manually clicked OK, so you shouldn't need to use this command unless for some reason you need to change your mind prior to the next confirmation. After any confirmation, Selenium will resume using the default behavior for future confirmations, automatically returning true (OK) unless/until you explicitly use [Choose Cancel On Next Confirmation](#Choose%20Cancel%20On%20Next%20Confirmation) for each confirmation.\n\nNote that every time a confirmation comes up, you must consume it by using a keywords such as [Get Alert Message](#Get%20Alert%20Message), or else the following selenium operations will fail."},{"name":"Clear Element Text","args":["locator"],"doc":"Clears the text value of text entry element identified by locator.\n\nSee [introduction](#Introduction) for details about locating elements."},{"name":"Click Button","args":["locator"],"doc":"Clicks a button identified by locator.\n\nKey attributes for buttons are id, name and value. See [introduction](#Introduction) for details about locating elements."},{"name":"Click Element","args":["locator"],"doc":"Click element identified by locator.\n\nKey attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Click Element At Coordinates","args":["locator","xoffset","yoffset"],"doc":"Click element identified by locator at x/y coordinates of the element. Cursor is moved and the center of the element and x/y coordinates are calculted from that point.\n\nKey attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Click Image","args":["locator"],"doc":"Clicks an image found by locator.\n\nKey attributes for images are id, src and alt. See [introduction](#Introduction) for details about locating elements."},{"name":"Click Link","args":["locator"],"doc":"Clicks a link identified by locator.\n\nKey attributes for links are id, name, href and link text. See [introduction](#Introduction) for details about locating elements."},{"name":"Close All Browsers","args":[],"doc":"Closes all open browsers and resets the browser cache.\n\nAfter this keyword new indexes returned from [Open Browser](#Open%20Browser) keyword are reset to 1.\n\nThis keyword should be used in test or suite teardown to make sure all browsers are closed."},{"name":"Close Browser","args":[],"doc":"Closes the current browser."},{"name":"Close Window","args":[],"doc":"Closes currently opened pop-up window."},{"name":"Confirm Action","args":[],"doc":"Dismisses currently shown confirmation dialog and returns it's message.\n\nBy default, this keyword chooses 'OK' option from the dialog. If 'Cancel' needs to be chosen, keyword [Choose Cancel On Next Confirmation](#Choose%20Cancel%20On%20Next%20Confirmation) must be called before the action that causes the confirmation dialog to be shown.\n\nExamples:\n\n```\nClick Button  Send  # Shows a confirmation dialog\n${message}=  Confirm Action  # Chooses Ok\nShould Be Equal  ${message}  Are your sure?\n    \nChoose Cancel On Next Confirmation    \nClick Button  Send  # Shows a confirmation dialog\nConfirm Action    # Chooses Cancel\n```"},{"name":"Create Webdriver","args":["driver_name","alias=None","kwargs={}","**init_kwargs"],"doc":"Creates an instance of a WebDriver.\n\nLike [Open Browser](#Open%20Browser), but allows passing arguments to a WebDriver's \\_\\_init\\_\\_. _Open Browser_ is preferred over _Create Webdriver_ when feasible.\n\nReturns the index of this browser instance which can be used later to switch back to it. Index starts from 1 and is reset back to it when [Close All Browsers](#Close%20All%20Browsers) keyword is used. See [Switch Browser](#Switch%20Browser) for example.\n\ndriver\\_name must be the exact name of a WebDriver in _selenium.webdriver_ to use. WebDriver names include: Firefox, Chrome, Ie, Opera, Safari, PhantomJS, and Remote.\n\nUse keyword arguments to specify the arguments you want to pass to the WebDriver's \\_\\_init\\_\\_. The values of the arguments are not processed in any way before being passed on. For Robot Framework < 2.8, which does not support keyword arguments, create a keyword dictionary and pass it in as argument kwargs. See the [Selenium API Documentation](http://selenium.googlecode.com/git/docs/api/py/api.html) for information about argument names and appropriate argument values.\n\nExamples:\n\n```\n# use proxy for Firefox      \n${proxy}=  Evaluate  sys.modules['selenium.webdriver'].Proxy()  sys, selenium.webdriver\n${proxy.http_proxy}=  Set Variable  localhost:8888  \nCreate Webdriver  Firefox  proxy=${proxy}  \n# use a proxy for PhantomJS      \n${service args}=  Create List  --proxy=192.168.132.104:8888  \nCreate Webdriver  PhantomJS  service_args=${service args}  \n```\n\nExample for Robot Framework < 2.8:\n\n```\n# debug IE driver      \n${kwargs}=  Create Dictionary  log_level=DEBUG  log_file=%{HOMEPATH}${/}ie.log\nCreate Webdriver  Ie  kwargs=${kwargs}  \n```"},{"name":"Current Frame Contains","args":["text","loglevel=INFO"],"doc":"Verifies that current frame contains text.\n\nSee [Page Should Contain](#Page%20Should%20Contain) for explanation about loglevel argument."},{"name":"Current Frame Should Not Contain","args":["text","loglevel=INFO"],"doc":"Verifies that current frame contains text.\n\nSee [Page Should Contain](#Page%20Should%20Contain) for explanation about loglevel argument."},{"name":"Delete All Cookies","args":[],"doc":"Deletes all cookies."},{"name":"Delete Cookie","args":["name"],"doc":"Deletes cookie matching name.\n\nIf the cookie is not found, nothing happens."},{"name":"Dismiss Alert","args":["accept=True"],"doc":"Returns true if alert was confirmed, false if it was dismissed\n\nThis keyword will fail if no alert is present. Note that following keywords will fail unless the alert is dismissed by this keyword or another like [Get Alert Message](#Get%20Alert%20Message)."},{"name":"Double Click Element","args":["locator"],"doc":"Double click element identified by locator.\n\nKey attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Drag And Drop","args":["source","target"],"doc":"Drags element identified with source which is a locator.\n\nElement can be moved on top of another element with target argument.\n\ntarget is a locator of the element where the dragged object is dropped.\n\nExamples:\n\n```\nDrag And Drop  elem1  elem2  # Move elem1 over elem2.\n```"},{"name":"Drag And Drop By Offset","args":["source","xoffset","yoffset"],"doc":"Drags element identified with source which is a locator.\n\nElement will be moved by xoffset and yoffset, each of which is a negative or positive number specify the offset.\n\nExamples:\n\n```\nDrag And Drop By Offset  myElem  50  -35  # Move myElem 50px right and 35px down.\n```"},{"name":"Element Should Be Disabled","args":["locator"],"doc":"Verifies that element identified with locator is disabled.\n\nKey attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Element Should Be Enabled","args":["locator"],"doc":"Verifies that element identified with locator is enabled.\n\nKey attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Element Should Be Visible","args":["locator","message="],"doc":"Verifies that the element identified by locator is visible.\n\nHerein, visible means that the element is logically visible, not optically visible in the current browser viewport. For example, an element that carries display:none is not logically visible, so using this keyword on that element would fail.\n\nmessage can be used to override the default error message.\n\nKey attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Element Should Contain","args":["locator","expected","message="],"doc":"Verifies element identified by locator contains text expected.\n\nIf you wish to assert an exact (not a substring) match on the text of the element, use [Element Text Should Be](#Element%20Text%20Should%20Be).\n\nmessage can be used to override the default error message.\n\nKey attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Element Should Not Be Visible","args":["locator","message="],"doc":"Verifies that the element identified by locator is NOT visible.\n\nThis is the opposite of [Element Should Be Visible](#Element%20Should%20Be%20Visible).\n\nmessage can be used to override the default error message.\n\nKey attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Element Should Not Contain","args":["locator","expected","message="],"doc":"Verifies element identified by locator does not contain text expected.\n\nmessage can be used to override the default error message.\n\nKey attributes for arbitrary elements are id and name. See [Element Should Contain](#Element%20Should%20Contain) for more details."},{"name":"Element Text Should Be","args":["locator","expected","message="],"doc":"Verifies element identified by locator exactly contains text expected.\n\nIn contrast to [Element Should Contain](#Element%20Should%20Contain), this keyword does not try a substring match but an exact match on the element identified by locator.\n\nmessage can be used to override the default error message.\n\nKey attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Execute Async Javascript","args":["*code"],"doc":"Executes asynchronous JavaScript code.\n\nSimilar to [Execute Javascript](#Execute%20Javascript) except that scripts executed with this keyword must explicitly signal they are finished by invoking the provided callback. This callback is always injected into the executed function as the last argument.\n\nScripts must complete within the script timeout or this keyword will fail. See the [Timeouts](#Timeouts) section for more information.\n\nExamples:\n\n```\nExecute Async JavaScript  var callback = arguments[arguments.length - 1];  window.setTimeout(callback, 2000);\nExecute Async JavaScript  ${CURDIR}/async_js_to_execute.js  \n${retval}=  Execute Async JavaScript  \n...  var callback = arguments[arguments.length - 1];  \n...  function answer(){callback(\"text\");};  \n...  window.setTimeout(answer, 2000);  \nShould Be Equal  ${retval}  text\n```"},{"name":"Execute Javascript","args":["*code"],"doc":"Executes the given JavaScript code.\n\ncode may contain multiple lines of code and may be divided into multiple cells in the test data. In that case, the parts are catenated together without adding spaces.\n\nIf code is an absolute path to an existing file, the JavaScript to execute will be read from that file. Forward slashes work as a path separator on all operating systems.\n\nThe JavaScript executes in the context of the currently selected frame or window as the body of an anonymous function. Use _window_ to refer to the window of your application and _document_ to refer to the document object of the current frame or window, e.g. _document.getElementById('foo')_.\n\nThis keyword returns None unless there is a return statement in the JavaScript. Return values are converted to the appropriate type in Python, including WebElements.\n\nExamples:\n\n```\nExecute JavaScript  window.my_js_function('arg1', 'arg2')  \nExecute JavaScript  ${CURDIR}/js_to_execute.js  \n${sum}=  Execute JavaScript  return 1 + 1;\nShould Be Equal  ${sum}  ${2}\n```"},{"name":"Focus","args":["locator"],"doc":"Sets focus to element identified by locator."},{"name":"Frame Should Contain","args":["locator","text","loglevel=INFO"],"doc":"Verifies frame identified by locator contains text.\n\nSee [Page Should Contain](#Page%20Should%20Contain) for explanation about loglevel argument.\n\nKey attributes for frames are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Get Alert Message","args":["dismiss=True"],"doc":"Returns the text of current JavaScript alert.\n\nBy default the current JavaScript alert will be dismissed. This keyword will fail if no alert is present. Note that following keywords will fail unless the alert is dismissed by this keyword or another like [Get Alert Message](#Get%20Alert%20Message)."},{"name":"Get All Links","args":[],"doc":"Returns a list containing ids of all links found in current page.\n\nIf a link has no id, an empty string will be in the list instead."},{"name":"Get Cookie Value","args":["name"],"doc":"Returns value of cookie found with name.\n\nIf no cookie is found with name, this keyword fails."},{"name":"Get Cookies","args":[],"doc":"Returns all cookies of the current page."},{"name":"Get Element Attribute","args":["attribute_locator"],"doc":"Return value of element attribute.\n\nattribute\\_locator consists of element locator followed by an @ sign and attribute name, for example \"element\\_id@class\"."},{"name":"Get Element Size","args":["locator"],"doc":"Returns width and height of element identified by locator.\n\nThe element width and height is returned. Fails if a matching element is not found."},{"name":"Get Horizontal Position","args":["locator"],"doc":"Returns horizontal position of element identified by locator.\n\nThe position is returned in pixels off the left side of the page, as an integer. Fails if a matching element is not found.\n\nSee also [Get Vertical Position](#Get%20Vertical%20Position)."},{"name":"Get List Items","args":["locator"],"doc":"Returns the values in the select list identified by locator.\n\nSelect list keywords work on both lists and combo boxes. Key attributes for select lists are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Get Location","args":[],"doc":"Returns the current location."},{"name":"Get Matching Xpath Count","args":["xpath"],"doc":"Returns number of elements matching xpath\n\nOne should not use the xpath= prefix for 'xpath'. XPath is assumed.\n\nCorrect:\n\ncount = | Get Matching Xpath Count | //div\\[@id='sales-pop'\\]\n\nIncorrect:\n\ncount = | Get Matching Xpath Count | xpath=//div\\[@id='sales-pop'\\]\n\nIf you wish to assert the number of matching elements, use [Xpath Should Match X Times](#Xpath%20Should%20Match%20X%20Times)."},{"name":"Get Selected List Label","args":["locator"],"doc":"Returns the visible label of the selected element from the select list identified by locator.\n\nSelect list keywords work on both lists and combo boxes. Key attributes for select lists are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Get Selected List Labels","args":["locator"],"doc":"Returns the visible labels of selected elements (as a list) from the select list identified by locator.\n\nFails if there is no selection.\n\nSelect list keywords work on both lists and combo boxes. Key attributes for select lists are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Get Selected List Value","args":["locator"],"doc":"Returns the value of the selected element from the select list identified by locator.\n\nReturn value is read from value attribute of the selected element.\n\nSelect list keywords work on both lists and combo boxes. Key attributes for select lists are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Get Selected List Values","args":["locator"],"doc":"Returns the values of selected elements (as a list) from the select list identified by locator.\n\nFails if there is no selection.\n\nSelect list keywords work on both lists and combo boxes. Key attributes for select lists are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Get Selenium Implicit Wait","args":[],"doc":"Gets the wait in seconds that is waited by Selenium.\n\nSee [Set Selenium Implicit Wait](#Set%20Selenium%20Implicit%20Wait) for an explanation."},{"name":"Get Selenium Speed","args":[],"doc":"Gets the delay in seconds that is waited after each Selenium command.\n\nSee [Set Selenium Speed](#Set%20Selenium%20Speed) for an explanation."},{"name":"Get Selenium Timeout","args":[],"doc":"Gets the timeout in seconds that is used by various keywords.\n\nSee [Set Selenium Timeout](#Set%20Selenium%20Timeout) for an explanation."},{"name":"Get Source","args":[],"doc":"Returns the entire html source of the current page or frame."},{"name":"Get Table Cell","args":["table_locator","row","column","loglevel=INFO"],"doc":"Returns the content from a table cell.\n\nRow and column number start from 1. Header and footer rows are included in the count. A negative row or column number can be used to get rows counting from the end (end: -1). Cell content from header or footer rows can be obtained with this keyword. To understand how tables are identified, please take a look at the [introduction](#Introduction).\n\nSee [Page Should Contain](#Page%20Should%20Contain) for explanation about loglevel argument."},{"name":"Get Text","args":["locator"],"doc":"Returns the text value of element identified by locator.\n\nSee [introduction](#Introduction) for details about locating elements."},{"name":"Get Title","args":[],"doc":"Returns title of current page."},{"name":"Get Value","args":["locator"],"doc":"Returns the value attribute of element identified by locator.\n\nSee [introduction](#Introduction) for details about locating elements."},{"name":"Get Vertical Position","args":["locator"],"doc":"Returns vertical position of element identified by locator.\n\nThe position is returned in pixels off the top of the page, as an integer. Fails if a matching element is not found.\n\nSee also [Get Horizontal Position](#Get%20Horizontal%20Position)."},{"name":"Get Webelement","args":["locator"],"doc":"Returns the first WebElement matching the given locator.\n\nSee [introduction](#Introduction) for details about locating elements."},{"name":"Get Webelements","args":["locator"],"doc":"Returns list of WebElement objects matching locator.\n\nSee [introduction](#Introduction) for details about locating elements."},{"name":"Get Window Identifiers","args":[],"doc":"Returns and logs id attributes of all windows known to the browser."},{"name":"Get Window Names","args":[],"doc":"Returns and logs names of all windows known to the browser."},{"name":"Get Window Position","args":[],"doc":"Returns current window position as x then y.\n\nExample:\n\n```\n${x}  ${y}=  Get Window Position\n```"},{"name":"Get Window Size","args":[],"doc":"Returns current window size as width then height.\n\nExample:\n\n```\n${width}  ${height}=  Get Window Size\n```"},{"name":"Get Window Titles","args":[],"doc":"Returns and logs titles of all windows known to the browser."},{"name":"Go Back","args":[],"doc":"Simulates the user clicking the \"back\" button on their browser."},{"name":"Go To","args":["url"],"doc":"Navigates the active browser instance to the provided URL."},{"name":"Input Password","args":["locator","text"],"doc":"Types the given password into text field identified by locator.\n\nDifference between this keyword and [Input Text](#Input%20Text) is that this keyword does not log the given password. See [introduction](#Introduction) for details about locating elements."},{"name":"Input Text","args":["locator","text"],"doc":"Types the given text into text field identified by locator.\n\nSee [introduction](#Introduction) for details about locating elements."},{"name":"Input Text Into Prompt","args":["text"],"doc":"Types the given text into alert box."},{"name":"List Selection Should Be","args":["locator","*items"],"doc":"Verifies the selection of select list identified by locator is exactly \\*items.\n\nIf you want to test that no option is selected, simply give no items.\n\nSelect list keywords work on both lists and combo boxes. Key attributes for select lists are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"List Should Have No Selections","args":["locator"],"doc":"Verifies select list identified by locator has no selections.\n\nSelect list keywords work on both lists and combo boxes. Key attributes for select lists are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"List Windows","args":[],"doc":"Return all current window handles as a list"},{"name":"Location Should Be","args":["url"],"doc":"Verifies that current URL is exactly url."},{"name":"Location Should Contain","args":["expected"],"doc":"Verifies that current URL contains expected."},{"name":"Locator Should Match X Times","args":["locator","expected_locator_count","message=","loglevel=INFO"],"doc":"Verifies that the page contains the given number of elements located by the given locator.\n\nSee [introduction](#Introduction) for details about locating elements.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about message and loglevel arguments."},{"name":"Log Location","args":[],"doc":"Logs and returns the current location."},{"name":"Log Source","args":["loglevel=INFO"],"doc":"Logs and returns the entire html source of the current page or frame.\n\nThe loglevel argument defines the used log level. Valid log levels are WARN, INFO (default), DEBUG, and NONE (no logging)."},{"name":"Log Title","args":[],"doc":"Logs and returns the title of current page."},{"name":"Maximize Browser Window","args":[],"doc":"Maximizes current browser window."},{"name":"Mouse Down","args":["locator"],"doc":"Simulates pressing the left mouse button on the element specified by locator.\n\nThe element is pressed without releasing the mouse button.\n\nKey attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements.\n\nSee also the more specific keywords [Mouse Down On Image](#Mouse%20Down%20On%20Image) and [Mouse Down On Link](#Mouse%20Down%20On%20Link)."},{"name":"Mouse Down On Image","args":["locator"],"doc":"Simulates a mouse down event on an image.\n\nKey attributes for images are id, src and alt. See [introduction](#Introduction) for details about locating elements."},{"name":"Mouse Down On Link","args":["locator"],"doc":"Simulates a mouse down event on a link.\n\nKey attributes for links are id, name, href and link text. See [introduction](#Introduction) for details about locating elements."},{"name":"Mouse Out","args":["locator"],"doc":"Simulates moving mouse away from the element specified by locator.\n\nKey attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Mouse Over","args":["locator"],"doc":"Simulates hovering mouse over the element specified by locator.\n\nKey attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Mouse Up","args":["locator"],"doc":"Simulates releasing the left mouse button on the element specified by locator.\n\nKey attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Open Browser","args":["url","browser=firefox","alias=None","remote_url=False","desired_capabilities=None","ff_profile_dir=None"],"doc":"Opens a new browser instance to given URL.\n\nReturns the index of this browser instance which can be used later to switch back to it. Index starts from 1 and is reset back to it when [Close All Browsers](#Close%20All%20Browsers) keyword is used. See [Switch Browser](#Switch%20Browser) for example.\n\nOptional alias is an alias for the browser instance and it can be used for switching between browsers (just as index can be used). See [Switch Browser](#Switch%20Browser) for more details.\n\nPossible values for browser are as follows:\n\n```\nfirefox  FireFox\nff  FireFox\ninternetexplorer  Internet Explorer\nie  Internet Explorer\ngooglechrome  Google Chrome\ngc  Google Chrome\nchrome  Google Chrome\nopera  Opera\nphantomjs  PhantomJS\nhtmlunit  HTMLUnit\nhtmlunitwithjs  HTMLUnit with Javascipt support\nandroid  Android\niphone  Iphone\nsafari  Safari\nedge  Edge\n```\n\nNote, that you will encounter strange behavior, if you open multiple Internet Explorer browser instances. That is also why [Switch Browser](#Switch%20Browser) only works with one IE browser at most. For more information see: [http://selenium-grid.seleniumhq.org/faq.html#i\\_get\\_some\\_strange\\_errors\\_when\\_i\\_run\\_multiple\\_internet\\_explorer\\_instances\\_on\\_the\\_same\\_machine](http://selenium-grid.seleniumhq.org/faq.html#i_get_some_strange_errors_when_i_run_multiple_internet_explorer_instances_on_the_same_machine)\n\nOptional 'remote\\_url' is the url for a remote selenium server for example [http://127.0.0.1:4444/wd/hub](http://127.0.0.1:4444/wd/hub). If you specify a value for remote you can also specify 'desired\\_capabilities' which is a string in the form key1:val1,key2:val2 that will be used to specify desired\\_capabilities to the remote server. This is useful for doing things like specify a proxy server for internet explorer or for specify browser and os if your using saucelabs.com. 'desired\\_capabilities' can also be a dictonary (created with 'Create Dictionary') to allow for more complex configurations.\n\nOptional 'ff\\_profile\\_dir' is the path to the firefox profile dir if you wish to overwrite the default."},{"name":"Open Context Menu","args":["locator"],"doc":"Opens context menu on element identified by locator."},{"name":"Page Should Contain","args":["text","loglevel=INFO"],"doc":"Verifies that current page contains text.\n\nIf this keyword fails, it automatically logs the page source using the log level specified with the optional loglevel argument. Valid log levels are DEBUG, INFO (default), WARN, and NONE. If the log level is NONE or below the current active log level the source will not be logged."},{"name":"Page Should Contain Button","args":["locator","message=","loglevel=INFO"],"doc":"Verifies button identified by locator is found from current page.\n\nThis keyword searches for buttons created with either input or button tag.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about message and loglevel arguments.\n\nKey attributes for buttons are id, name and value. See [introduction](#Introduction) for details about locating elements."},{"name":"Page Should Contain Checkbox","args":["locator","message=","loglevel=INFO"],"doc":"Verifies checkbox identified by locator is found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about message and loglevel arguments.\n\nKey attributes for checkboxes are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Page Should Contain Element","args":["locator","message=","loglevel=INFO"],"doc":"Verifies element identified by locator is found on the current page.\n\nmessage can be used to override default error message.\n\nSee [Page Should Contain](#Page%20Should%20Contain) for explanation about loglevel argument.\n\nKey attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Page Should Contain Image","args":["locator","message=","loglevel=INFO"],"doc":"Verifies image identified by locator is found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about message and loglevel arguments.\n\nKey attributes for images are id, src and alt. See [introduction](#Introduction) for details about locating elements."},{"name":"Page Should Contain Link","args":["locator","message=","loglevel=INFO"],"doc":"Verifies link identified by locator is found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about message and loglevel arguments.\n\nKey attributes for links are id, name, href and link text. See [introduction](#Introduction) for details about locating elements."},{"name":"Page Should Contain List","args":["locator","message=","loglevel=INFO"],"doc":"Verifies select list identified by locator is found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about message and loglevel arguments.\n\nKey attributes for lists are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Page Should Contain Radio Button","args":["locator","message=","loglevel=INFO"],"doc":"Verifies radio button identified by locator is found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about message and loglevel arguments.\n\nKey attributes for radio buttons are id, name and value. See [introduction](#Introduction) for details about locating elements."},{"name":"Page Should Contain Textfield","args":["locator","message=","loglevel=INFO"],"doc":"Verifies text field identified by locator is found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about message and loglevel arguments.\n\nKey attributes for text fields are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Page Should Not Contain","args":["text","loglevel=INFO"],"doc":"Verifies the current page does not contain text.\n\nSee [Page Should Contain](#Page%20Should%20Contain) for explanation about loglevel argument."},{"name":"Page Should Not Contain Button","args":["locator","message=","loglevel=INFO"],"doc":"Verifies button identified by locator is not found from current page.\n\nThis keyword searches for buttons created with either input or button tag.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about message and loglevel arguments.\n\nKey attributes for buttons are id, name and value. See [introduction](#Introduction) for details about locating elements."},{"name":"Page Should Not Contain Checkbox","args":["locator","message=","loglevel=INFO"],"doc":"Verifies checkbox identified by locator is not found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about message and loglevel arguments.\n\nKey attributes for checkboxes are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Page Should Not Contain Element","args":["locator","message=","loglevel=INFO"],"doc":"Verifies element identified by locator is not found on the current page.\n\nmessage can be used to override the default error message.\n\nSee [Page Should Contain](#Page%20Should%20Contain) for explanation about loglevel argument.\n\nKey attributes for arbitrary elements are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Page Should Not Contain Image","args":["locator","message=","loglevel=INFO"],"doc":"Verifies image identified by locator is found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about message and loglevel arguments.\n\nKey attributes for images are id, src and alt. See [introduction](#Introduction) for details about locating elements."},{"name":"Page Should Not Contain Link","args":["locator","message=","loglevel=INFO"],"doc":"Verifies image identified by locator is not found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about message and loglevel arguments.\n\nKey attributes for images are id, src and alt. See [introduction](#Introduction) for details about locating elements."},{"name":"Page Should Not Contain List","args":["locator","message=","loglevel=INFO"],"doc":"Verifies select list identified by locator is not found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about message and loglevel arguments.\n\nKey attributes for lists are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Page Should Not Contain Radio Button","args":["locator","message=","loglevel=INFO"],"doc":"Verifies radio button identified by locator is not found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about message and loglevel arguments.\n\nKey attributes for radio buttons are id, name and value. See [introduction](#Introduction) for details about locating elements."},{"name":"Page Should Not Contain Textfield","args":["locator","message=","loglevel=INFO"],"doc":"Verifies text field identified by locator is not found from current page.\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about message and loglevel arguments.\n\nKey attributes for text fields are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Press Key","args":["locator","key"],"doc":"Simulates user pressing key on element identified by locator. key is either a single character, a string, or a numerical ASCII code of the key lead by '\\\\\\\\'. Examples:\n\n```\nPress Key  text_field  q  \nPress Key  text_field  abcde  \nPress Key  login_button  \\\\13  # ASCII code for enter key\n```"},{"name":"Radio Button Should Be Set To","args":["group_name","value"],"doc":"Verifies radio button group identified by group\\_name has its selection set to value.\n\nSee [Select Radio Button](#Select%20Radio%20Button) for information about how radio buttons are located."},{"name":"Radio Button Should Not Be Selected","args":["group_name"],"doc":"Verifies radio button group identified by group\\_name has no selection.\n\nSee [Select Radio Button](#Select%20Radio%20Button) for information about how radio buttons are located."},{"name":"Register Keyword To Run On Failure","args":["keyword"],"doc":"Sets the keyword to execute when a Selenium2Library keyword fails.\n\nkeyword\\_name is the name of a keyword (from any available libraries) that will be executed if a Selenium2Library keyword fails. It is not possible to use a keyword that requires arguments. Using the value \"Nothing\" will disable this feature altogether.\n\nThe initial keyword to use is set in [importing](#Importing), and the keyword that is used by default is [Capture Page Screenshot](#Capture%20Page%20Screenshot). Taking a screenshot when something failed is a very useful feature, but notice that it can slow down the execution.\n\nThis keyword returns the name of the previously registered failure keyword. It can be used to restore the original value later.\n\nExample:\n\n```\nRegister Keyword To Run On Failure  Log Source  # Run Log Source on failure.  \n${previous kw}=  Register Keyword To Run On Failure  Nothing  # Disables run-on-failure functionality and stores the previous kw name in a variable.\nRegister Keyword To Run On Failure  ${previous kw}  # Restore to the previous keyword.  \n```\n\nThis run-on-failure functionality only works when running tests on Python/Jython 2.4 or newer and it does not work on IronPython at all."},{"name":"Reload Page","args":[],"doc":"Simulates user reloading page."},{"name":"Remove Location Strategy","args":["strategy_name"],"doc":"Removes a previously added custom location strategy. Will fail if a default strategy is specified.\n\nSee [Add Location Strategy](#Add%20Location%20Strategy) for details about adding a custom location strategy."},{"name":"Select All From List","args":["locator"],"doc":"Selects all values from multi-select list identified by id.\n\nKey attributes for lists are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Select Checkbox","args":["locator"],"doc":"Selects checkbox identified by locator.\n\nDoes nothing if checkbox is already selected. Key attributes for checkboxes are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Select Frame","args":["locator"],"doc":"Sets frame identified by locator as current frame.\n\nKey attributes for frames are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Select From List","args":["locator","*items"],"doc":"Selects \\*items from list identified by locator\n\nIf more than one value is given for a single-selection list, the last value will be selected. If the target list is a multi-selection list, and \\*items is an empty list, all values of the list will be selected.\n\n\\*items try to select by value then by label.\n\nIt's faster to use 'by index/value/label' functions.\n\nAn exception is raised for a single-selection list if the last value does not exist in the list and a warning for all other non- existing items. For a multi-selection list, an exception is raised for any and all non-existing values.\n\nSelect list keywords work on both lists and combo boxes. Key attributes for select lists are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Select From List By Index","args":["locator","*indexes"],"doc":"Selects \\*indexes from list identified by locator\n\nSelect list keywords work on both lists and combo boxes. Key attributes for select lists are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Select From List By Label","args":["locator","*labels"],"doc":"Selects \\*labels from list identified by locator\n\nSelect list keywords work on both lists and combo boxes. Key attributes for select lists are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Select From List By Value","args":["locator","*values"],"doc":"Selects \\*values from list identified by locator\n\nSelect list keywords work on both lists and combo boxes. Key attributes for select lists are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Select Radio Button","args":["group_name","value"],"doc":"Sets selection of radio button group identified by group\\_name to value.\n\nThe radio button to be selected is located by two arguments:\n\n*   group\\_name is used as the name of the radio input\n*   value is used for the value attribute or for the id attribute\n\nThe XPath used to locate the correct radio button then looks like this: //input\\[@type='radio' and @name='group\\_name' and (@value='value' or @id='value')\\]\n\nExamples:\n\n```\nSelect Radio Button  size  XL  # Matches HTML like <input type=\"radio\" name=\"size\" value=\"XL\">XL</input>\nSelect Radio Button  size  sizeXL  # Matches HTML like <input type=\"radio\" name=\"size\" value=\"XL\" id=\"sizeXL\">XL</input>\n```"},{"name":"Select Window","args":["locator=None"],"doc":"Selects the window matching locator and return previous window handle.\n\nlocator: any of name, title, url, window handle, excluded handle's list, or special words. return: either current window handle before selecting, or None if no current window.\n\nIf the window is found, all subsequent commands use that window, until this keyword is used again. If the window is not found, this keyword fails.\n\nBy default, when a locator value is provided, it is matched against the title of the window and the javascript name of the window. If multiple windows with same identifier are found, the first one is selected.\n\nThere are some special locators for searching target window: string 'main' (default): select the main window; string 'self': only return current window handle; string 'new': select the last-indexed window assuming it is the newest opened window window list: select the first window not in given list (See 'List Windows' to get the list)\n\nIt is also possible to specify the approach Selenium2Library should take to find a window by specifying a locator strategy:\n\n```\nStrategy  Example  Description\ntitle  Select Window | title=My Document  Matches by window title\nname  Select Window | name=${name}  Matches by window javascript name\nurl  Select Window | url=http://google.com  Matches by window's current URL\n```\n\nExample:\n\n```\nClick Link  popup_link  # opens new window  \nSelect Window  popupName    \nTitle Should Be  Popup Title    \nSelect Window      # Chooses the main window again\n```"},{"name":"Set Browser Implicit Wait","args":["seconds"],"doc":"Sets current browser's implicit wait in seconds.\n\nFrom selenium 2 function 'Sets a sticky timeout to implicitly wait for an element to be found, or a command to complete. This method only needs to be called one time per session.'\n\nExample:\n\n```\nSet Browser Implicit Wait  10 seconds\n```\n\nSee also [Set Selenium Implicit Wait](#Set%20Selenium%20Implicit%20Wait)."},{"name":"Set Screenshot Directory","args":["path","persist=False"],"doc":"Sets the root output directory for captured screenshots.\n\n`path` argument specifies the absolute path where the screenshots should be written to. If the specified `path` does not exist, it will be created. Setting `persist` specifies that the given `path` should be used for the rest of the test execution, otherwise the path will be restored at the end of the currently executing scope."},{"name":"Set Selenium Implicit Wait","args":["seconds"],"doc":"Sets Selenium 2's default implicit wait in seconds and sets the implicit wait for all open browsers.\n\nFrom selenium 2 function 'Sets a sticky timeout to implicitly wait for an element to be found, or a command to complete. This method only needs to be called one time per session.'\n\nExample:\n\n```\n${orig wait} =  Set Selenium Implicit Wait  10 seconds\nPerform AJAX call that is slow    \nSet Selenium Implicit Wait  ${orig wait}  \n```"},{"name":"Set Selenium Speed","args":["seconds"],"doc":"Sets the delay in seconds that is waited after each Selenium command.\n\nThis is useful mainly in slowing down the test execution to be able to view the execution. seconds may be given in Robot Framework time format. Returns the previous speed value.\n\nExample:\n\n```\nSet Selenium Speed  .5 seconds\n```"},{"name":"Set Selenium Timeout","args":["seconds"],"doc":"Sets the timeout in seconds used by various keywords.\n\nThere are several Wait ... keywords that take timeout as an argument. All of these timeout arguments are optional. The timeout used by all of them can be set globally using this keyword. See [Timeouts](#Timeouts) for more information about timeouts.\n\nThe previous timeout value is returned by this keyword and can be used to set the old value back later. The default timeout is 5 seconds, but it can be altered in [importing](#Importing).\n\nExample:\n\n```\n${orig timeout} =  Set Selenium Timeout  15 seconds\nOpen page that loads slowly    \nSet Selenium Timeout  ${orig timeout}  \n```"},{"name":"Set Window Position","args":["x","y"],"doc":"Sets the position x and y of the current window to the specified values.\n\nExample:\n\n```\nSet Window Size  ${1000}  ${0}\n${x}  ${y}=  Get Window Position\nShould Be Equal  ${x}  ${1000}\nShould Be Equal  ${y}  ${0}\n```"},{"name":"Set Window Size","args":["width","height"],"doc":"Sets the width and height of the current window to the specified values.\n\nExample:\n\n```\nSet Window Size  ${800}  ${600}\n${width}  ${height}=  Get Window Size\nShould Be Equal  ${width}  ${800}\nShould Be Equal  ${height}  ${600}\n```"},{"name":"Simulate","args":["locator","event"],"doc":"Simulates event on element identified by locator.\n\nThis keyword is useful if element has OnEvent handler that needs to be explicitly invoked.\n\nSee [introduction](#Introduction) for details about locating elements."},{"name":"Submit Form","args":["locator=None"],"doc":"Submits a form identified by locator.\n\nIf locator is empty, first form in the page will be submitted. Key attributes for forms are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Switch Browser","args":["index_or_alias"],"doc":"Switches between active browsers using index or alias.\n\nIndex is returned from [Open Browser](#Open%20Browser) and alias can be given to it.\n\nExample:\n\n```\nOpen Browser  http://google.com  ff  \nLocation Should Be  http://google.com    \nOpen Browser  http://yahoo.com  ie  2nd conn\nLocation Should Be  http://yahoo.com    \nSwitch Browser  1  # index  \nPage Should Contain  I'm feeling lucky    \nSwitch Browser  2nd conn  # alias  \nPage Should Contain  More Yahoo!    \nClose All Browsers      \n```\n\nAbove example expects that there was no other open browsers when opening the first one because it used index '1' when switching to it later. If you aren't sure about that you can store the index into a variable as below.\n\n```\n${id} =  Open Browser  http://google.com  *firefox\n# Do something ...      \nSwitch Browser  ${id}    \n```"},{"name":"Table Cell Should Contain","args":["table_locator","row","column","expected","loglevel=INFO"],"doc":"Verifies that a certain cell in a table contains expected.\n\nRow and column number start from 1. This keyword passes if the specified cell contains the given content. If you want to test that the cell content matches exactly, or that it e.g. starts with some text, use [Get Table Cell](#Get%20Table%20Cell) keyword in combination with built-in keywords such as Should Be Equal or Should Start With.\n\nTo understand how tables are identified, please take a look at the [introduction](#Introduction).\n\nSee [Page Should Contain](#Page%20Should%20Contain) for explanation about loglevel argument."},{"name":"Table Column Should Contain","args":["table_locator","col","expected","loglevel=INFO"],"doc":"Verifies that a specific column contains expected.\n\nThe first leftmost column is column number 1. A negative column number can be used to get column counting from the end of the row (end: -1). If the table contains cells that span multiple columns, those merged cells count as a single column. For example both tests below work, if in one row columns A and B are merged with colspan=\"2\", and the logical third column contains \"C\".\n\nExample:\n\n```\nTable Column Should Contain  tableId  3  C\nTable Column Should Contain  tableId  2  C\n```\n\nTo understand how tables are identified, please take a look at the [introduction](#Introduction).\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about loglevel argument."},{"name":"Table Footer Should Contain","args":["table_locator","expected","loglevel=INFO"],"doc":"Verifies that the table footer contains expected.\n\nWith table footer can be described as any <td>-element that is child of a <tfoot>-element. To understand how tables are identified, please take a look at the [introduction](#Introduction).\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about loglevel argument."},{"name":"Table Header Should Contain","args":["table_locator","expected","loglevel=INFO"],"doc":"Verifies that the table header, i.e. any <th>...</th> element, contains expected.\n\nTo understand how tables are identified, please take a look at the [introduction](#Introduction).\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about loglevel argument."},{"name":"Table Row Should Contain","args":["table_locator","row","expected","loglevel=INFO"],"doc":"Verifies that a specific table row contains expected.\n\nThe uppermost row is row number 1. A negative column number can be used to get column counting from the end of the row (end: -1). For tables that are structured with thead, tbody and tfoot, only the tbody section is searched. Please use [Table Header Should Contain](#Table%20Header%20Should%20Contain) or [Table Footer Should Contain](#Table%20Footer%20Should%20Contain) for tests against the header or footer content.\n\nIf the table contains cells that span multiple rows, a match only occurs for the uppermost row of those merged cells. To understand how tables are identified, please take a look at the [introduction](#Introduction).\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about loglevel argument."},{"name":"Table Should Contain","args":["table_locator","expected","loglevel=INFO"],"doc":"Verifies that expected can be found somewhere in the table.\n\nTo understand how tables are identified, please take a look at the [introduction](#Introduction).\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about loglevel argument."},{"name":"Textarea Should Contain","args":["locator","expected","message="],"doc":"Verifies text area identified by locator contains text expected.\n\nmessage can be used to override default error message.\n\nKey attributes for text areas are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Textarea Value Should Be","args":["locator","expected","message="],"doc":"Verifies the value in text area identified by locator is exactly expected.\n\nmessage can be used to override default error message.\n\nKey attributes for text areas are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Textfield Should Contain","args":["locator","expected","message="],"doc":"Verifies text field identified by locator contains text expected.\n\nmessage can be used to override default error message.\n\nKey attributes for text fields are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Textfield Value Should Be","args":["locator","expected","message="],"doc":"Verifies the value in text field identified by locator is exactly expected.\n\nmessage can be used to override default error message.\n\nKey attributes for text fields are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Title Should Be","args":["title"],"doc":"Verifies that current page title equals title."},{"name":"Unselect Checkbox","args":["locator"],"doc":"Removes selection of checkbox identified by locator.\n\nDoes nothing if the checkbox is not checked. Key attributes for checkboxes are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Unselect Frame","args":[],"doc":"Sets the top frame as the current frame."},{"name":"Unselect From List","args":["locator","*items"],"doc":"Unselects given values from select list identified by locator.\n\nAs a special case, giving empty list as \\*items will remove all selections.\n\n\\*items try to unselect by value AND by label.\n\nIt's faster to use 'by index/value/label' functions.\n\nSelect list keywords work on both lists and combo boxes. Key attributes for select lists are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Unselect From List By Index","args":["locator","*indexes"],"doc":"Unselects \\*indexes from list identified by locator\n\nSelect list keywords work on both lists and combo boxes. Key attributes for select lists are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Unselect From List By Label","args":["locator","*labels"],"doc":"Unselects \\*labels from list identified by locator\n\nSelect list keywords work on both lists and combo boxes. Key attributes for select lists are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Unselect From List By Value","args":["locator","*values"],"doc":"Unselects \\*values from list identified by locator\n\nSelect list keywords work on both lists and combo boxes. Key attributes for select lists are id and name. See [introduction](#Introduction) for details about locating elements."},{"name":"Wait For Condition","args":["condition","timeout=None","error=None"],"doc":"Waits until the given condition is true or timeout expires.\n\nThe condition can be arbitrary JavaScript expression but must contain a return statement (with the value to be returned) at the end. See [Execute JavaScript](#Execute%20Javascript) for information about accessing the actual contents of the window through JavaScript.\n\nerror can be used to override the default error message.\n\nSee [introduction](#Introduction) for more information about timeout and its default value.\n\nSee also [Wait Until Page Contains](#Wait%20Until%20Page%20Contains), [Wait Until Page Contains Element](#Wait%20Until%20Page%20Contains%20Element), [Wait Until Element Is Visible](#Wait%20Until%20Element%20Is%20Visible) and BuiltIn keyword Wait Until Keyword Succeeds."},{"name":"Wait Until Element Contains","args":["locator","text","timeout=None","error=None"],"doc":"Waits until given element contains text.\n\nFails if timeout expires before the text appears on given element. See [introduction](#Introduction) for more information about timeout and its default value.\n\nerror can be used to override the default error message.\n\nSee also [Wait Until Page Contains](#Wait%20Until%20Page%20Contains), [Wait Until Page Contains Element](#Wait%20Until%20Page%20Contains%20Element), [Wait For Condition](#Wait%20For%20Condition), [Wait Until Element Is Visible](#Wait%20Until%20Element%20Is%20Visible) and BuiltIn keyword Wait Until Keyword Succeeds."},{"name":"Wait Until Element Does Not Contain","args":["locator","text","timeout=None","error=None"],"doc":"Waits until given element does not contain text.\n\nFails if timeout expires before the text disappears from given element. See [introduction](#Introduction) for more information about timeout and its default value.\n\nerror can be used to override the default error message.\n\nSee also [Wait Until Page Contains](#Wait%20Until%20Page%20Contains), [Wait Until Page Contains Element](#Wait%20Until%20Page%20Contains%20Element), [Wait For Condition](#Wait%20For%20Condition), [Wait Until Element Is Visible](#Wait%20Until%20Element%20Is%20Visible) and BuiltIn keyword Wait Until Keyword Succeeds."},{"name":"Wait Until Element Is Enabled","args":["locator","timeout=None","error=None"],"doc":"Waits until element specified with locator is enabled.\n\nFails if timeout expires before the element is enabled. See [introduction](#Introduction) for more information about timeout and its default value.\n\nerror can be used to override the default error message.\n\nSee also [Wait Until Page Contains](#Wait%20Until%20Page%20Contains), [Wait Until Page Contains Element](#Wait%20Until%20Page%20Contains%20Element), [Wait For Condition](#Wait%20For%20Condition) and BuiltIn keyword Wait Until Keyword Succeeds."},{"name":"Wait Until Element Is Not Visible","args":["locator","timeout=None","error=None"],"doc":"Waits until element specified with locator is not visible.\n\nFails if timeout expires before the element is not visible. See [introduction](#Introduction) for more information about timeout and its default value.\n\nerror can be used to override the default error message.\n\nSee also [Wait Until Page Contains](#Wait%20Until%20Page%20Contains), [Wait Until Page Contains Element](#Wait%20Until%20Page%20Contains%20Element), [Wait For Condition](#Wait%20For%20Condition) and BuiltIn keyword Wait Until Keyword Succeeds."},{"name":"Wait Until Element Is Visible","args":["locator","timeout=None","error=None"],"doc":"Waits until element specified with locator is visible.\n\nFails if timeout expires before the element is visible. See [introduction](#Introduction) for more information about timeout and its default value.\n\nerror can be used to override the default error message.\n\nSee also [Wait Until Page Contains](#Wait%20Until%20Page%20Contains), [Wait Until Page Contains Element](#Wait%20Until%20Page%20Contains%20Element), [Wait For Condition](#Wait%20For%20Condition) and BuiltIn keyword Wait Until Keyword Succeeds."},{"name":"Wait Until Page Contains","args":["text","timeout=None","error=None"],"doc":"Waits until text appears on current page.\n\nFails if timeout expires before the text appears. See [introduction](#Introduction) for more information about timeout and its default value.\n\nerror can be used to override the default error message.\n\nSee also [Wait Until Page Contains Element](#Wait%20Until%20Page%20Contains%20Element), [Wait For Condition](#Wait%20For%20Condition), [Wait Until Element Is Visible](#Wait%20Until%20Element%20Is%20Visible) and BuiltIn keyword Wait Until Keyword Succeeds."},{"name":"Wait Until Page Contains Element","args":["locator","timeout=None","error=None"],"doc":"Waits until element specified with locator appears on current page.\n\nFails if timeout expires before the element appears. See [introduction](#Introduction) for more information about timeout and its default value.\n\nerror can be used to override the default error message.\n\nSee also [Wait Until Page Contains](#Wait%20Until%20Page%20Contains), [Wait For Condition](#Wait%20For%20Condition), [Wait Until Element Is Visible](#Wait%20Until%20Element%20Is%20Visible) and BuiltIn keyword Wait Until Keyword Succeeds."},{"name":"Wait Until Page Does Not Contain","args":["text","timeout=None","error=None"],"doc":"Waits until text disappears from current page.\n\nFails if timeout expires before the text disappears. See [introduction](#Introduction) for more information about timeout and its default value.\n\nerror can be used to override the default error message.\n\nSee also [Wait Until Page Contains](#Wait%20Until%20Page%20Contains), [Wait For Condition](#Wait%20For%20Condition), [Wait Until Element Is Visible](#Wait%20Until%20Element%20Is%20Visible) and BuiltIn keyword Wait Until Keyword Succeeds."},{"name":"Wait Until Page Does Not Contain Element","args":["locator","timeout=None","error=None"],"doc":"Waits until element specified with locator disappears from current page.\n\nFails if timeout expires before the element disappears. See [introduction](#Introduction) for more information about timeout and its default value.\n\nerror can be used to override the default error message.\n\nSee also [Wait Until Page Contains](#Wait%20Until%20Page%20Contains), [Wait For Condition](#Wait%20For%20Condition), [Wait Until Element Is Visible](#Wait%20Until%20Element%20Is%20Visible) and BuiltIn keyword Wait Until Keyword Succeeds."},{"name":"Xpath Should Match X Times","args":["xpath","expected_xpath_count","message=","loglevel=INFO"],"doc":"Verifies that the page contains the given number of elements located by the given xpath.\n\nOne should not use the xpath= prefix for 'xpath'. XPath is assumed.\n\nCorrect:\n\nXpath Should Match X Times | //div\\[@id='sales-pop'\\] | 1\n\nIncorrect:\n\nXpath Should Match X Times | xpath=//div\\[@id='sales-pop'\\] | 1\n\nSee [Page Should Contain Element](#Page%20Should%20Contain%20Element) for explanation about message and loglevel arguments."}]}