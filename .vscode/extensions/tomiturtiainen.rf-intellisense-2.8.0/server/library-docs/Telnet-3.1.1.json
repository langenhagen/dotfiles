{"name": "Telnet", "version": "3.1.1", "keywords": [{"name": "Close All Connections", "args": [], "doc": "Closes all open connections and empties the connection cache.\n\nIf multiple connections are opened, this keyword should be used in\na test or suite teardown to make sure that all connections are closed.\nIt is not an error is some of the connections have already been closed\nby `Close Connection`.\n\nAfter this keyword, new indexes returned by `Open Connection`\nkeyword are reset to 1."}, {"name": "Close Connection", "args": ["loglevel=None"], "doc": "Closes the current Telnet connection.\n\nRemaining output in the connection is read, logged, and returned.\nIt is not an error to close an already closed connection.\n\nUse `Close All Connections` if you want to make sure all opened\nconnections are closed.\n\nSee `Logging` section for more information about log levels."}, {"name": "Execute Command", "args": ["command", "loglevel=None", "strip_prompt=False"], "doc": "Executes the given ``command`` and reads, logs, and returns everything until the prompt.\n\nThis keyword requires the prompt to be [#Configuration|configured]\neither in `importing` or with `Open Connection` or `Set Prompt` keyword.\n\nThis is a convenience keyword that uses `Write` and `Read Until Prompt`\ninternally. Following two examples are thus functionally identical:\n\n| ${out} = | `Execute Command`   | pwd |\n\n| `Write`  | pwd                 |\n| ${out} = | `Read Until Prompt` |\n\nSee `Logging` section for more information about log levels and `Read\nUntil Prompt` for more information about the ``strip_prompt`` parameter."}, {"name": "Login", "args": ["username", "password", "login_prompt=login: ", "password_prompt=Password: ", "login_timeout=1 second", "login_incorrect=Login incorrect"], "doc": "Logs in to the Telnet server with the given user information.\n\nThis keyword reads from the connection until the ``login_prompt`` is\nencountered and then types the given ``username``. Then it reads until\nthe ``password_prompt`` and types the given ``password``. In both cases\na newline is appended automatically and the connection specific\ntimeout used when waiting for outputs.\n\nHow logging status is verified depends on whether a prompt is set for\nthis connection or not:\n\n1) If the prompt is set, this keyword reads the output until the prompt\nis found using the normal timeout. If no prompt is found, login is\nconsidered failed and also this keyword fails. Note that in this case\nboth ``login_timeout`` and ``login_incorrect`` arguments are ignored.\n\n2) If the prompt is not set, this keywords sleeps until ``login_timeout``\nand then reads all the output available on the connection. If the\noutput contains ``login_incorrect`` text, login is considered failed\nand also this keyword fails.\n\nSee `Configuration` section for more information about setting\nnewline, timeout, and prompt."}, {"name": "Open Connection", "args": ["host", "alias=None", "port=23", "timeout=None", "newline=None", "prompt=None", "prompt_is_regexp=False", "encoding=None", "encoding_errors=None", "default_log_level=None", "window_size=None", "environ_user=None", "terminal_emulation=None", "terminal_type=None", "telnetlib_log_level=None", "connection_timeout=None"], "doc": "Opens a new Telnet connection to the given host and port.\n\nThe ``timeout``, ``newline``, ``prompt``, ``prompt_is_regexp``,\n``encoding``, ``default_log_level``, ``window_size``, ``environ_user``,\n``terminal_emulation``, ``terminal_type`` and ``telnetlib_log_level``\narguments get default values when the library is [#Importing|imported].\nSetting them here overrides those values for the opened connection.\nSee `Configuration`, `Terminal emulation` and `Logging` sections for\nmore information about these parameters and their possible values.\n\nPossible already opened connections are cached and it is possible to\nswitch back to them using `Switch Connection` keyword. It is possible to\nswitch either using explicitly given ``alias`` or using index returned\nby this keyword. Indexing starts from 1 and is reset back to it by\n`Close All Connections` keyword."}, {"name": "Read", "args": ["loglevel=None"], "doc": "Reads everything that is currently available in the output.\n\nRead output is both returned and logged. See `Logging` section for more\ninformation about log levels."}, {"name": "Read Until", "args": ["expected", "loglevel=None"], "doc": "Reads output until ``expected`` text is encountered.\n\nText up to and including the match is returned and logged. If no match\nis found, this keyword fails. How much to wait for the output depends\non the [#Configuration|configured timeout].\n\nSee `Logging` section for more information about log levels. Use\n`Read Until Regexp` if more complex matching is needed."}, {"name": "Read Until Prompt", "args": ["loglevel=None", "strip_prompt=False"], "doc": "Reads output until the prompt is encountered.\n\nThis keyword requires the prompt to be [#Configuration|configured]\neither in `importing` or with `Open Connection` or `Set Prompt` keyword.\n\nBy default, text up to and including the prompt is returned and logged.\nIf no prompt is found, this keyword fails. How much to wait for the\noutput depends on the [#Configuration|configured timeout].\n\nIf you want to exclude the prompt from the returned output, set\n``strip_prompt`` to a true value (see `Boolean arguments`). If your\nprompt is a regular expression, make sure that the expression spans the\nwhole prompt, because only the part of the output that matches the\nregular expression is stripped away.\n\nSee `Logging` section for more information about log levels."}, {"name": "Read Until Regexp", "args": ["*expected"], "doc": "Reads output until any of the ``expected`` regular expressions match.\n\nThis keyword accepts any number of regular expressions patterns or\ncompiled Python regular expression objects as arguments. Text up to\nand including the first match to any of the regular expressions is\nreturned and logged. If no match is found, this keyword fails. How much\nto wait for the output depends on the [#Configuration|configured timeout].\n\nIf the last given argument is a [#Logging|valid log level], it is used\nas ``loglevel`` similarly as with `Read Until` keyword.\n\nSee the documentation of\n[http://docs.python.org/library/re.html|Python re module]\nfor more information about the supported regular expression syntax.\nNotice that possible backslashes need to be escaped in Robot Framework\ntest data.\n\nExamples:\n| `Read Until Regexp` | (#|$) |\n| `Read Until Regexp` | first_regexp | second_regexp |\n| `Read Until Regexp` | \\\\d{4}-\\\\d{2}-\\\\d{2} | DEBUG |"}, {"name": "Set Default Log Level", "args": ["level"], "doc": "Sets the default log level used for `logging` in the current connection.\n\nThe old default log level is returned and can be used to restore the\nlog level later.\n\nSee `Configuration` section for more information about global and\nconnection specific configuration."}, {"name": "Set Encoding", "args": ["encoding=None", "errors=None"], "doc": "Sets the encoding to use for `writing and reading` in the current connection.\n\nThe given ``encoding`` specifies the encoding to use when written/read\ntext is encoded/decoded, and ``errors`` specifies the error handler to\nuse if encoding/decoding fails. Either of these can be omitted and in\nthat case the old value is not affected. Use string ``NONE`` to disable\nencoding altogether.\n\nSee `Configuration` section for more information about encoding and\nerror handlers, as well as global and connection specific configuration\nin general.\n\nThe old values are returned and can be used to restore the encoding\nand the error handler later. See `Set Prompt` for a similar example.\n\nIf terminal emulation is used, the encoding can not be changed on an open\nconnection."}, {"name": "Set Newline", "args": ["newline"], "doc": "Sets the newline used by `Write` keyword in the current connection.\n\nThe old newline is returned and can be used to restore the newline later.\nSee `Set Timeout` for a similar example.\n\nIf terminal emulation is used, the newline can not be changed on an open\nconnection.\n\nSee `Configuration` section for more information about global and\nconnection specific configuration."}, {"name": "Set Prompt", "args": ["prompt", "prompt_is_regexp=False"], "doc": "Sets the prompt used by `Read Until Prompt` and `Login` in the current connection.\n\nIf ``prompt_is_regexp`` is given a true value (see `Boolean arguments`),\nthe given ``prompt`` is considered to be a regular expression.\n\nThe old prompt is returned and can be used to restore the prompt later.\n\nExample:\n| ${prompt} | ${regexp} = | `Set Prompt` | $ |\n| `Do Something` |\n| `Set Prompt` | ${prompt} | ${regexp} |\n\nSee the documentation of\n[http://docs.python.org/library/re.html|Python re module]\nfor more information about the supported regular expression syntax.\nNotice that possible backslashes need to be escaped in Robot Framework\ntest data.\n\nSee `Configuration` section for more information about global and\nconnection specific configuration."}, {"name": "Set Telnetlib Log Level", "args": ["level"], "doc": "Sets the log level used for `logging` in the underlying ``telnetlib``.\n\nNote that ``telnetlib`` can be very noisy thus using the level ``NONE``\ncan shutdown the messages generated by this library."}, {"name": "Set Timeout", "args": ["timeout"], "doc": "Sets the timeout used for waiting output in the current connection.\n\nRead operations that expect some output to appear (`Read Until`, `Read\nUntil Regexp`, `Read Until Prompt`, `Login`) use this timeout and fail\nif the expected output does not appear before this timeout expires.\n\nThe ``timeout`` must be given in `time string format`. The old timeout\nis returned and can be used to restore the timeout later.\n\nExample:\n| ${old} =       | `Set Timeout` | 2 minute 30 seconds |\n| `Do Something` |\n| `Set Timeout`  | ${old}  |\n\nSee `Configuration` section for more information about global and\nconnection specific configuration."}, {"name": "Switch Connection", "args": ["index_or_alias"], "doc": "Switches between active connections using an index or an alias.\n\nAliases can be given to `Open Connection` keyword which also always\nreturns the connection index.\n\nThis keyword returns the index of previous active connection.\n\nExample:\n| `Open Connection`   | myhost.net              |          |           |\n| `Login`             | john                    | secret   |           |\n| `Write`             | some command            |          |           |\n| `Open Connection`   | yourhost.com            | 2nd conn |           |\n| `Login`             | root                    | password |           |\n| `Write`             | another cmd             |          |           |\n| ${old index}=       | `Switch Connection`     | 1        | # index   |\n| `Write`             | something               |          |           |\n| `Switch Connection` | 2nd conn                |          | # alias   |\n| `Write`             | whatever                |          |           |\n| `Switch Connection` | ${old index}            | | # back to original |\n| [Teardown]          | `Close All Connections` |          |           |\n\nThe example above expects that there were no other open\nconnections when opening the first one, because it used index\n``1`` when switching to the connection later. If you are not\nsure about that, you can store the index into a variable as\nshown below.\n\n| ${index} =          | `Open Connection` | myhost.net |\n| `Do Something`      |                   |            |\n| `Switch Connection` | ${index}          |            |"}, {"name": "Write", "args": ["text", "loglevel=None"], "doc": "Writes the given text plus a newline into the connection.\n\nThe newline character sequence to use can be [#Configuration|configured]\nboth globally and per connection basis. The default value is ``CRLF``.\n\nThis keyword consumes the written text, until the added newline, from\nthe output and logs and returns it. The given text itself must not\ncontain newlines. Use `Write Bare` instead if either of these features\ncauses a problem.\n\n*Note:* This keyword does not return the possible output of the executed\ncommand. To get the output, one of the `Read ...` `keywords` must be\nused. See `Writing and reading` section for more details.\n\nSee `Logging` section for more information about log levels."}, {"name": "Write Bare", "args": ["text"], "doc": "Writes the given text, and nothing else, into the connection.\n\nThis keyword does not append a newline nor consume the written text.\nUse `Write` if these features are needed."}, {"name": "Write Control Character", "args": ["character"], "doc": "Writes the given control character into the connection.\n\nThe control character is prepended with an IAC (interpret as command)\ncharacter.\n\nThe following control character names are supported: BRK, IP, AO, AYT,\nEC, EL, NOP. Additionally, you can use arbitrary numbers to send any\ncontrol character.\n\nExample:\n| Write Control Character | BRK | # Send Break command |\n| Write Control Character | 241 | # Send No operation command |"}, {"name": "Write Until Expected Output", "args": ["text", "expected", "timeout", "retry_interval", "loglevel=None"], "doc": "Writes the given ``text`` repeatedly, until ``expected`` appears in the output.\n\n``text`` is written without appending a newline and it is consumed from\nthe output before trying to find ``expected``. If ``expected`` does not\nappear in the output within ``timeout``, this keyword fails.\n\n``retry_interval`` defines the time to wait ``expected`` to appear before\nwriting the ``text`` again. Consuming the written ``text`` is subject to\nthe normal [#Configuration|configured timeout].\n\nBoth ``timeout`` and ``retry_interval`` must be given in `time string\nformat`. See `Logging` section for more information about log levels.\n\nExample:\n| Write Until Expected Output | ps -ef| grep myprocess\\r\\n | myprocess |\n| ...                         | 5 s                          | 0.5 s     |\n\nThe above example writes command ``ps -ef | grep myprocess\\r\\n`` until\n``myprocess`` appears in the output. The command is written every 0.5\nseconds and the keyword fails if ``myprocess`` does not appear in\nthe output in 5 seconds."}]}