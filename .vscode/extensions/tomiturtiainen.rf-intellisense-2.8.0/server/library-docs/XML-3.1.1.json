{"name": "XML", "version": "3.1.1", "keywords": [{"name": "Add Element", "args": ["source", "element", "index=None", "xpath=."], "doc": "Adds a child element to the specified element.\n\nThe element to whom to add the new element is specified using ``source``\nand ``xpath``. They have exactly the same semantics as with `Get Element`\nkeyword. The resulting XML structure is returned, and if the ``source``\nis an already parsed XML structure, it is also modified in place.\n\nThe ``element`` to add can be specified as a path to an XML file or\nas a string containing XML, or it can be an already parsed XML element.\nThe element is copied before adding so modifying either the original\nor the added element has no effect on the other\n.\nThe element is added as the last child by default, but a custom index\ncan be used to alter the position. Indices start from zero (0 = first\nposition, 1 = second position, etc.), and negative numbers refer to\npositions at the end (-1 = second last position, -2 = third last, etc.).\n\nExamples using ``${XML}`` structure from `Example`:\n| Add Element | ${XML} | <new id=\"x\"><c1/></new> |\n| Add Element | ${XML} | <c2/> | xpath=new |\n| Add Element | ${XML} | <c3/> | index=1 | xpath=new |\n| ${new} = | Get Element | ${XML} | new |\n| Elements Should Be Equal | ${new} | <new id=\"x\"><c1/><c3/><c2/></new> |\n\nUse `Remove Element` or `Remove Elements` to remove elements."}, {"name": "Clear Element", "args": ["source", "xpath=.", "clear_tail=False"], "doc": "Clears the contents of the specified element.\n\nThe element to clear is specified using ``source`` and ``xpath``. They\nhave exactly the same semantics as with `Get Element` keyword.\nThe resulting XML structure is returned, and if the ``source`` is\nan already parsed XML structure, it is also modified in place.\n\nClearing the element means removing its text, attributes, and children.\nElement's tail text is not removed by default, but that can be changed\nby giving ``clear_tail`` a true value (see `Boolean arguments`). See\n`Element attributes` section for more information about tail in\ngeneral.\n\nExamples using ``${XML}`` structure from `Example`:\n| Clear Element            | ${XML}   | xpath=first |\n| ${first} = | Get Element | ${XML}   | xpath=first |\n| Elements Should Be Equal | ${first} | <first/>    |\n| Clear Element            | ${XML}   | xpath=html/p/b | clear_tail=yes |\n| Element Text Should Be   | ${XML}   | Text with italics. | xpath=html/p | normalize_whitespace=yes |\n| Clear Element            | ${XML}   |\n| Elements Should Be Equal | ${XML}   | <example/> |\n\nUse `Remove Element` to remove the whole element."}, {"name": "Copy Element", "args": ["source", "xpath=."], "doc": "Returns a copy of the specified element.\n\nThe element to copy is specified using ``source`` and ``xpath``. They\nhave exactly the same semantics as with `Get Element` keyword.\n\nIf the copy or the original element is modified afterwards, the changes\nhave no effect on the other.\n\nExamples using ``${XML}`` structure from `Example`:\n| ${elem} =  | Get Element  | ${XML}  | xpath=first |\n| ${copy1} = | Copy Element | ${elem} |\n| ${copy2} = | Copy Element | ${XML}  | xpath=first |\n| Set Element Text         | ${XML}   | new text    | xpath=first      |\n| Set Element Attribute    | ${copy1} | id          | new              |\n| Elements Should Be Equal | ${elem}  | <first id=\"1\">new text</first> |\n| Elements Should Be Equal | ${copy1} | <first id=\"new\">text</first>   |\n| Elements Should Be Equal | ${copy2} | <first id=\"1\">text</first>     |"}, {"name": "Element Attribute Should Be", "args": ["source", "name", "expected", "xpath=.", "message=None"], "doc": "Verifies that the specified attribute is ``expected``.\n\nThe element whose attribute is verified is specified using ``source``\nand ``xpath``. They have exactly the same semantics as with\n`Get Element` keyword.\n\nThe keyword passes if the attribute ``name`` of the element is equal to\nthe ``expected`` value, and otherwise it fails. The default error\nmessage can be overridden with the ``message`` argument.\n\nTo test that the element does not have a certain attribute, Python\n``None`` (i.e. variable ``${NONE}``) can be used as the expected value.\nA cleaner alternative is using `Element Should Not Have Attribute`.\n\nExamples using ``${XML}`` structure from `Example`:\n| Element Attribute Should Be | ${XML} | id | 1       | xpath=first |\n| Element Attribute Should Be | ${XML} | id | ${NONE} |             |\n\nSee also `Element Attribute Should Match` and `Get Element Attribute`."}, {"name": "Element Attribute Should Match", "args": ["source", "name", "pattern", "xpath=.", "message=None"], "doc": "Verifies that the specified attribute matches ``expected``.\n\nThis keyword works exactly like `Element Attribute Should Be` except\nthat the expected value can be given as a pattern that the attribute of\nthe element must match.\n\nPattern matching is similar as matching files in a shell with\n``*``, ``?`` and ``[chars]`` acting as wildcards. See the\n`Pattern matching` section for more information.\n\nExamples using ``${XML}`` structure from `Example`:\n| Element Attribute Should Match | ${XML} | id | ?   | xpath=first |\n| Element Attribute Should Match | ${XML} | id | c*d | xpath=third/second |"}, {"name": "Element Should Exist", "args": ["source", "xpath=.", "message=None"], "doc": "Verifies that one or more element match the given ``xpath``.\n\nArguments ``source`` and ``xpath`` have exactly the same semantics as\nwith `Get Elements` keyword. Keyword passes if the ``xpath`` matches\none or more elements in the ``source``. The default error message can\nbe overridden with the ``message`` argument.\n\nSee also `Element Should Not Exist` as well as `Get Element Count`\nthat this keyword uses internally."}, {"name": "Element Should Not Exist", "args": ["source", "xpath=.", "message=None"], "doc": "Verifies that no element match the given ``xpath``.\n\nArguments ``source`` and ``xpath`` have exactly the same semantics as\nwith `Get Elements` keyword. Keyword fails if the ``xpath`` matches any\nelement in the ``source``. The default error message can be overridden\nwith the ``message`` argument.\n\nSee also `Element Should Exist` as well as `Get Element Count`\nthat this keyword uses internally."}, {"name": "Element Should Not Have Attribute", "args": ["source", "name", "xpath=.", "message=None"], "doc": "Verifies that the specified element does not have  attribute ``name``.\n\nThe element whose attribute is verified is specified using ``source``\nand ``xpath``. They have exactly the same semantics as with\n`Get Element` keyword.\n\nThe keyword fails if the specified element has attribute ``name``. The\ndefault error message can be overridden with the ``message`` argument.\n\nExamples using ``${XML}`` structure from `Example`:\n| Element Should Not Have Attribute | ${XML} | id  |\n| Element Should Not Have Attribute | ${XML} | xxx | xpath=first |\n\nSee also `Get Element Attribute`, `Get Element Attributes`,\n`Element Text Should Be` and `Element Text Should Match`."}, {"name": "Element Text Should Be", "args": ["source", "expected", "xpath=.", "normalize_whitespace=False", "message=None"], "doc": "Verifies that the text of the specified element is ``expected``.\n\nThe element whose text is verified is specified using ``source`` and\n``xpath``. They have exactly the same semantics as with `Get Element`\nkeyword.\n\nThe text to verify is got from the specified element using the same\nlogic as with `Get Element Text`. This includes optional whitespace\nnormalization using the ``normalize_whitespace`` option.\n\nThe keyword passes if the text of the element is equal to the\n``expected`` value, and otherwise it fails. The default error message\ncan be overridden with the ``message`` argument.  Use `Element Text\nShould Match` to verify the text against a pattern instead of an exact\nvalue.\n\nExamples using ``${XML}`` structure from `Example`:\n| Element Text Should Be | ${XML}       | text     | xpath=first      |\n| Element Text Should Be | ${XML}       | ${EMPTY} | xpath=second/child |\n| ${paragraph} =         | Get Element  | ${XML}   | xpath=html/p     |\n| Element Text Should Be | ${paragraph} | Text with bold and italics. | normalize_whitespace=yes |"}, {"name": "Element Text Should Match", "args": ["source", "pattern", "xpath=.", "normalize_whitespace=False", "message=None"], "doc": "Verifies that the text of the specified element matches ``expected``.\n\nThis keyword works exactly like `Element Text Should Be` except that\nthe expected value can be given as a pattern that the text of the\nelement must match.\n\nPattern matching is similar as matching files in a shell with\n``*``, ``?`` and ``[chars]`` acting as wildcards. See the\n`Pattern matching` section for more information.\n\nExamples using ``${XML}`` structure from `Example`:\n| Element Text Should Match | ${XML}       | t???   | xpath=first  |\n| ${paragraph} =            | Get Element  | ${XML} | xpath=html/p |\n| Element Text Should Match | ${paragraph} | Text with * and *. | normalize_whitespace=yes |"}, {"name": "Element To String", "args": ["source", "xpath=.", "encoding=None"], "doc": "Returns the string representation of the specified element.\n\nThe element to convert to a string is specified using ``source`` and\n``xpath``. They have exactly the same semantics as with `Get Element`\nkeyword.\n\nBy default the string is returned as Unicode. If ``encoding`` argument\nis given any value, the string is returned as bytes in the specified\nencoding. The resulting string never contains the XML declaration.\n\nSee also `Log Element` and `Save XML`."}, {"name": "Elements Should Be Equal", "args": ["source", "expected", "exclude_children=False", "normalize_whitespace=False"], "doc": "Verifies that the given ``source`` element is equal to ``expected``.\n\nBoth ``source`` and ``expected`` can be given as a path to an XML file,\nas a string containing XML, or as an already parsed XML element\nstructure. See `introduction` for more information about parsing XML in\ngeneral.\n\nThe keyword passes if the ``source`` element and ``expected`` element\nare equal. This includes testing the tag names, texts, and attributes\nof the elements. By default also child elements are verified the same\nway, but this can be disabled by setting ``exclude_children`` to a\ntrue value (see `Boolean arguments`).\n\nAll texts inside the given elements are verified, but possible text\noutside them is not. By default texts must match exactly, but setting\n``normalize_whitespace`` to a true value makes text verification\nindependent on newlines, tabs, and the amount of spaces. For more\ndetails about handling text see `Get Element Text` keyword and\ndiscussion about elements' `text` and `tail` attributes in the\n`introduction`.\n\nExamples using ``${XML}`` structure from `Example`:\n| ${first} =               | Get Element | ${XML} | first             |\n| Elements Should Be Equal | ${first}    | <first id=\"1\">text</first> |\n| ${p} =                   | Get Element | ${XML} | html/p            |\n| Elements Should Be Equal | ${p} | <p>Text with <b>bold</b> and <i>italics</i>.</p> | normalize_whitespace=yes |\n| Elements Should Be Equal | ${p} | <p>Text with</p> | exclude | normalize |\n\nThe last example may look a bit strange because the ``<p>`` element\nonly has text ``Text with``. The reason is that rest of the text\ninside ``<p>`` actually belongs to the child elements. This includes\nthe ``.`` at the end that is the `tail` text of the ``<i>`` element.\n\nSee also `Elements Should Match`."}, {"name": "Elements Should Match", "args": ["source", "expected", "exclude_children=False", "normalize_whitespace=False"], "doc": "Verifies that the given ``source`` element matches ``expected``.\n\nThis keyword works exactly like `Elements Should Be Equal` except that\ntexts and attribute values in the expected value can be given as\npatterns.\n\nPattern matching is similar as matching files in a shell with\n``*``, ``?`` and ``[chars]`` acting as wildcards. See the\n`Pattern matching` section for more information.\n\nExamples using ``${XML}`` structure from `Example`:\n| ${first} =            | Get Element | ${XML} | first          |\n| Elements Should Match | ${first}    | <first id=\"?\">*</first> |\n\nSee `Elements Should Be Equal` for more examples."}, {"name": "Evaluate Xpath", "args": ["source", "expression", "context=."], "doc": "Evaluates the given xpath expression and returns results.\n\nThe element in which context the expression is executed is specified\nusing ``source`` and ``context`` arguments. They have exactly the same\nsemantics as ``source`` and ``xpath`` arguments have with `Get Element`\nkeyword.\n\nThe xpath expression to evaluate is given as ``expression`` argument.\nThe result of the evaluation is returned as-is.\n\nExamples using ``${XML}`` structure from `Example`:\n| ${count} =      | Evaluate Xpath | ${XML}  | count(third/*) |\n| Should Be Equal | ${count}       | ${3}    |\n| ${text} =       | Evaluate Xpath | ${XML}  | string(descendant::second[last()]/@id) |\n| Should Be Equal | ${text}        | child   |\n| ${bold} =       | Evaluate Xpath | ${XML}  | boolean(preceding-sibling::*[1] = 'bold') | context=html/p/i |\n| Should Be Equal | ${bold}        | ${True} |\n\nThis keyword works only if lxml mode is taken into use when `importing`\nthe library."}, {"name": "Get Child Elements", "args": ["source", "xpath=."], "doc": "Returns the child elements of the specified element as a list.\n\nThe element whose children to return is specified using ``source`` and\n``xpath``. They have exactly the same semantics as with `Get Element`\nkeyword.\n\nAll the direct child elements of the specified element are returned.\nIf the element has no children, an empty list is returned.\n\nExamples using ``${XML}`` structure from `Example`:\n| ${children} =    | Get Child Elements | ${XML} |             |\n| Length Should Be | ${children}        | 4      |             |\n| ${children} =    | Get Child Elements | ${XML} | xpath=first |\n| Should Be Empty  | ${children}        |        |             |"}, {"name": "Get Element", "args": ["source", "xpath=."], "doc": "Returns an element in the ``source`` matching the ``xpath``.\n\nThe ``source`` can be a path to an XML file, a string containing XML, or\nan already parsed XML element. The ``xpath`` specifies which element to\nfind. See the `introduction` for more details about both the possible\nsources and the supported xpath syntax.\n\nThe keyword fails if more, or less, than one element matches the\n``xpath``. Use `Get Elements` if you want all matching elements to be\nreturned.\n\nExamples using ``${XML}`` structure from `Example`:\n| ${element} = | Get Element | ${XML}     | second |\n| ${child} =   | Get Element | ${element} | child  |\n\n`Parse XML` is recommended for parsing XML when the whole structure\nis needed. It must be used if there is a need to configure how XML\nnamespaces are handled.\n\nMany other keywords use this keyword internally, and keywords modifying\nXML are typically documented to both to modify the given source and\nto return it. Modifying the source does not apply if the source is\ngiven as a string. The XML structure parsed based on the string and\nthen modified is nevertheless returned."}, {"name": "Get Element Attribute", "args": ["source", "name", "xpath=.", "default=None"], "doc": "Returns the named attribute of the specified element.\n\nThe element whose attribute to return is specified using ``source`` and\n``xpath``. They have exactly the same semantics as with `Get Element`\nkeyword.\n\nThe value of the attribute ``name`` of the specified element is returned.\nIf the element does not have such element, the ``default`` value is\nreturned instead.\n\nExamples using ``${XML}`` structure from `Example`:\n| ${attribute} =  | Get Element Attribute | ${XML} | id | xpath=first |\n| Should Be Equal | ${attribute}          | 1      |    |             |\n| ${attribute} =  | Get Element Attribute | ${XML} | xx | xpath=first | default=value |\n| Should Be Equal | ${attribute}          | value  |    |             |\n\nSee also `Get Element Attributes`, `Element Attribute Should Be`,\n`Element Attribute Should Match` and `Element Should Not Have Attribute`."}, {"name": "Get Element Attributes", "args": ["source", "xpath=."], "doc": "Returns all attributes of the specified element.\n\nThe element whose attributes to return is specified using ``source`` and\n``xpath``. They have exactly the same semantics as with `Get Element`\nkeyword.\n\nAttributes are returned as a Python dictionary. It is a copy of the\noriginal attributes so modifying it has no effect on the XML structure.\n\nExamples using ``${XML}`` structure from `Example`:\n| ${attributes} = | Get Element Attributes      | ${XML} | first |\n| Dictionary Should Contain Key | ${attributes} | id     |       |\n| ${attributes} = | Get Element Attributes      | ${XML} | third |\n| Should Be Empty | ${attributes}               |        |       |\n\nUse `Get Element Attribute` to get the value of a single attribute."}, {"name": "Get Element Count", "args": ["source", "xpath=."], "doc": "Returns and logs how many elements the given ``xpath`` matches.\n\nArguments ``source`` and ``xpath`` have exactly the same semantics as\nwith `Get Elements` keyword that this keyword uses internally.\n\nSee also `Element Should Exist` and `Element Should Not Exist`."}, {"name": "Get Element Text", "args": ["source", "xpath=.", "normalize_whitespace=False"], "doc": "Returns all text of the element, possibly whitespace normalized.\n\nThe element whose text to return is specified using ``source`` and\n``xpath``. They have exactly the same semantics as with `Get Element`\nkeyword.\n\nThis keyword returns all the text of the specified element, including\nall the text its children and grandchildren contain. If the element\nhas no text, an empty string is returned. The returned text is thus not\nalways the same as the `text` attribute of the element.\n\nBy default all whitespace, including newlines and indentation, inside\nthe element is returned as-is. If ``normalize_whitespace`` is given\na true value (see `Boolean arguments`), then leading and trailing\nwhitespace is stripped, newlines and tabs converted to spaces, and\nmultiple spaces collapsed into one. This is especially useful when\ndealing with HTML data.\n\nExamples using ``${XML}`` structure from `Example`:\n| ${text} =       | Get Element Text | ${XML}       | first        |\n| Should Be Equal | ${text}          | text         |              |\n| ${text} =       | Get Element Text | ${XML}       | second/child |\n| Should Be Empty | ${text}          |              |              |\n| ${paragraph} =  | Get Element      | ${XML}       | html/p       |\n| ${text} =       | Get Element Text | ${paragraph} | normalize_whitespace=yes |\n| Should Be Equal | ${text}          | Text with bold and italics. |\n\nSee also `Get Elements Texts`, `Element Text Should Be` and\n`Element Text Should Match`."}, {"name": "Get Elements", "args": ["source", "xpath"], "doc": "Returns a list of elements in the ``source`` matching the ``xpath``.\n\nThe ``source`` can be a path to an XML file, a string containing XML, or\nan already parsed XML element. The ``xpath`` specifies which element to\nfind. See the `introduction` for more details.\n\nElements matching the ``xpath`` are returned as a list. If no elements\nmatch, an empty list is returned. Use `Get Element` if you want to get\nexactly one match.\n\nExamples using ``${XML}`` structure from `Example`:\n| ${children} =    | Get Elements | ${XML} | third/child |\n| Length Should Be | ${children}  | 2      |             |\n| ${children} =    | Get Elements | ${XML} | first/child |\n| Should Be Empty  |  ${children} |        |             |"}, {"name": "Get Elements Texts", "args": ["source", "xpath", "normalize_whitespace=False"], "doc": "Returns text of all elements matching ``xpath`` as a list.\n\nThe elements whose text to return is specified using ``source`` and\n``xpath``. They have exactly the same semantics as with `Get Elements`\nkeyword.\n\nThe text of the matched elements is returned using the same logic\nas with `Get Element Text`. This includes optional whitespace\nnormalization using the ``normalize_whitespace`` option.\n\nExamples using ``${XML}`` structure from `Example`:\n| @{texts} =       | Get Elements Texts | ${XML}    | third/child |\n| Length Should Be | ${texts}           | 2         |             |\n| Should Be Equal  | @{texts}[0]        | more text |             |\n| Should Be Equal  | @{texts}[1]        | ${EMPTY}  |             |"}, {"name": "Log Element", "args": ["source", "level=INFO", "xpath=."], "doc": "Logs the string representation of the specified element.\n\nThe element specified with ``source`` and ``xpath`` is first converted\ninto a string using `Element To String` keyword internally. The\nresulting string is then logged using the given ``level``.\n\nThe logged string is also returned."}, {"name": "Parse Xml", "args": ["source", "keep_clark_notation=False", "strip_namespaces=False"], "doc": "Parses the given XML file or string into an element structure.\n\nThe ``source`` can either be a path to an XML file or a string\ncontaining XML. In both cases the XML is parsed into ElementTree\n[http://docs.python.org/library/xml.etree.elementtree.html#element-objects|element structure]\nand the root element is returned. Possible comments and processing\ninstructions in the source XML are removed.\n\nAs discussed in `Handling XML namespaces` section, this keyword, by\ndefault, removes namespace information ElementTree has added to tag\nnames and moves it into ``xmlns`` attributes. This typically eases\nhandling XML documents with namespaces considerably. If you do not\nwant that to happen, or want to avoid the small overhead of going\nthrough the element structure when your XML does not have namespaces,\nyou can disable this feature by giving ``keep_clark_notation`` argument\na true value (see `Boolean arguments`).\n\nIf you want to strip namespace information altogether so that it is\nnot included even if XML is saved, you can give a true value to\n``strip_namespaces`` argument. This functionality is new in Robot\nFramework 3.0.2.\n\nExamples:\n| ${root} = | Parse XML | <root><child/></root> |\n| ${xml} = | Parse XML | ${CURDIR}/test.xml | keep_clark_notation=True |\n| ${xml} = | Parse XML | ${CURDIR}/test.xml | strip_namespaces=True |\n\nUse `Get Element` keyword if you want to get a certain element and not\nthe whole structure. See `Parsing XML` section for more details and\nexamples."}, {"name": "Remove Element", "args": ["source", "xpath=", "remove_tail=False"], "doc": "Removes the element matching ``xpath`` from the ``source`` structure.\n\nThe element to remove from the ``source`` is specified with ``xpath``\nusing the same semantics as with `Get Element` keyword. The resulting\nXML structure is returned, and if the ``source`` is an already parsed\nXML structure, it is also modified in place.\n\nThe keyword fails if ``xpath`` does not match exactly one element.\nUse `Remove Elements` to remove all matched elements.\n\nElement's tail text is not removed by default, but that can be changed\nby giving ``remove_tail`` a true value (see `Boolean arguments`). See\n`Element attributes` section for more information about `tail` in\ngeneral.\n\nExamples using ``${XML}`` structure from `Example`:\n| Remove Element           | ${XML} | xpath=second |\n| Element Should Not Exist | ${XML} | xpath=second |\n| Remove Element           | ${XML} | xpath=html/p/b | remove_tail=yes |\n| Element Text Should Be   | ${XML} | Text with italics. | xpath=html/p | normalize_whitespace=yes |"}, {"name": "Remove Element Attribute", "args": ["source", "name", "xpath=."], "doc": "Removes attribute ``name`` from the specified element.\n\nThe element whose attribute to remove is specified using ``source`` and\n``xpath``. They have exactly the same semantics as with `Get Element`\nkeyword. The resulting XML structure is returned, and if the ``source``\nis an already parsed XML structure, it is also modified in place.\n\nIt is not a failure to remove a non-existing attribute. Use `Remove\nElement Attributes` to remove all attributes and `Set Element Attribute`\nto set them.\n\nExamples using ``${XML}`` structure from `Example`:\n| Remove Element Attribute          | ${XML} | id | xpath=first |\n| Element Should Not Have Attribute | ${XML} | id | xpath=first |\n\nCan only remove an attribute from a single element. Use `Remove Elements\nAttribute` to remove an attribute of multiple elements in one call."}, {"name": "Remove Element Attributes", "args": ["source", "xpath=."], "doc": "Removes all attributes from the specified element.\n\nThe element whose attributes to remove is specified using ``source`` and\n``xpath``. They have exactly the same semantics as with `Get Element`\nkeyword. The resulting XML structure is returned, and if the ``source``\nis an already parsed XML structure, it is also modified in place.\n\nUse `Remove Element Attribute` to remove a single attribute and\n`Set Element Attribute` to set them.\n\nExamples using ``${XML}`` structure from `Example`:\n| Remove Element Attributes         | ${XML} | xpath=first |\n| Element Should Not Have Attribute | ${XML} | id | xpath=first |\n\nCan only remove attributes from a single element. Use `Remove Elements\nAttributes` to remove all attributes of multiple elements in one call."}, {"name": "Remove Elements", "args": ["source", "xpath=", "remove_tail=False"], "doc": "Removes all elements matching ``xpath`` from the ``source`` structure.\n\nThe elements to remove from the ``source`` are specified with ``xpath``\nusing the same semantics as with `Get Elements` keyword. The resulting\nXML structure is returned, and if the ``source`` is an already parsed\nXML structure, it is also modified in place.\n\nIt is not a failure if ``xpath`` matches no elements. Use `Remove\nElement` to remove exactly one element.\n\nElement's tail text is not removed by default, but that can be changed\nby using ``remove_tail`` argument similarly as with `Remove Element`.\n\nExamples using ``${XML}`` structure from `Example`:\n| Remove Elements          | ${XML} | xpath=*/child      |\n| Element Should Not Exist | ${XML} | xpath=second/child |\n| Element Should Not Exist | ${XML} | xpath=third/child  |"}, {"name": "Remove Elements Attribute", "args": ["source", "name", "xpath=."], "doc": "Removes attribute ``name`` from the specified elements.\n\nLike `Remove Element Attribute` but removes the attribute of all\nelements matching the given ``xpath``."}, {"name": "Remove Elements Attributes", "args": ["source", "xpath=."], "doc": "Removes all attributes from the specified elements.\n\nLike `Remove Element Attributes` but removes all attributes of all\nelements matching the given ``xpath``."}, {"name": "Save Xml", "args": ["source", "path", "encoding=UTF-8"], "doc": "Saves the given element to the specified file.\n\nThe element to save is specified with ``source`` using the same\nsemantics as with `Get Element` keyword.\n\nThe file where the element is saved is denoted with ``path`` and the\nencoding to use with ``encoding``. The resulting file always contains\nthe XML declaration.\n\nThe resulting XML file may not be exactly the same as the original:\n- Comments and processing instructions are always stripped.\n- Possible doctype and namespace prefixes are only preserved when\n  `using lxml`.\n- Other small differences are possible depending on the ElementTree\n  or lxml version.\n\nUse `Element To String` if you just need a string representation of\nthe element."}, {"name": "Set Element Attribute", "args": ["source", "name", "value", "xpath=."], "doc": "Sets attribute ``name`` of the specified element to ``value``.\n\nThe element whose attribute to set is specified using ``source`` and\n``xpath``. They have exactly the same semantics as with `Get Element`\nkeyword. The resulting XML structure is returned, and if the ``source``\nis an already parsed XML structure, it is also modified in place.\n\nIt is possible to both set new attributes and to overwrite existing.\nUse `Remove Element Attribute` or `Remove Element Attributes` for\nremoving them.\n\nExamples using ``${XML}`` structure from `Example`:\n| Set Element Attribute       | ${XML} | attr | value |\n| Element Attribute Should Be | ${XML} | attr | value |\n| Set Element Attribute       | ${XML} | id   | new   | xpath=first |\n| Element Attribute Should Be | ${XML} | id   | new   | xpath=first |\n\nCan only set an attribute of a single element. Use `Set Elements\nAttribute` to set an attribute of multiple elements in one call."}, {"name": "Set Element Tag", "args": ["source", "tag", "xpath=."], "doc": "Sets the tag of the specified element.\n\nThe element whose tag to set is specified using ``source`` and\n``xpath``. They have exactly the same semantics as with `Get Element`\nkeyword. The resulting XML structure is returned, and if the ``source``\nis an already parsed XML structure, it is also modified in place.\n\nExamples using ``${XML}`` structure from `Example`:\n| Set Element Tag      | ${XML}     | newTag     |\n| Should Be Equal      | ${XML.tag} | newTag     |\n| Set Element Tag      | ${XML}     | xxx        | xpath=second/child |\n| Element Should Exist | ${XML}     | second/xxx |\n| Element Should Not Exist | ${XML} | second/child |\n\nCan only set the tag of a single element. Use `Set Elements Tag` to set\nthe tag of multiple elements in one call."}, {"name": "Set Element Text", "args": ["source", "text=None", "tail=None", "xpath=."], "doc": "Sets text and/or tail text of the specified element.\n\nThe element whose text to set is specified using ``source`` and\n``xpath``. They have exactly the same semantics as with `Get Element`\nkeyword. The resulting XML structure is returned, and if the ``source``\nis an already parsed XML structure, it is also modified in place.\n\nElement's text and tail text are changed only if new ``text`` and/or\n``tail`` values are given. See `Element attributes` section for more\ninformation about `text` and `tail` in general.\n\nExamples using ``${XML}`` structure from `Example`:\n| Set Element Text       | ${XML} | new text | xpath=first    |\n| Element Text Should Be | ${XML} | new text | xpath=first    |\n| Set Element Text       | ${XML} | tail=&   | xpath=html/p/b |\n| Element Text Should Be | ${XML} | Text with bold&italics. | xpath=html/p  | normalize_whitespace=yes |\n| Set Element Text       | ${XML} | slanted  | !! | xpath=html/p/i |\n| Element Text Should Be | ${XML} | Text with bold&slanted!! | xpath=html/p  | normalize_whitespace=yes |\n\nCan only set the text/tail of a single element. Use `Set Elements Text`\nto set the text/tail of multiple elements in one call."}, {"name": "Set Elements Attribute", "args": ["source", "name", "value", "xpath=."], "doc": "Sets attribute ``name`` of the specified elements to ``value``.\n\nLike `Set Element Attribute` but sets the attribute of all elements\nmatching the given ``xpath``."}, {"name": "Set Elements Tag", "args": ["source", "tag", "xpath=."], "doc": "Sets the tag of the specified elements.\n\nLike `Set Element Tag` but sets the tag of all elements matching\nthe given ``xpath``."}, {"name": "Set Elements Text", "args": ["source", "text=None", "tail=None", "xpath=."], "doc": "Sets text and/or tail text of the specified elements.\n\nLike `Set Element Text` but sets the text or tail of all elements\nmatching the given ``xpath``."}]}